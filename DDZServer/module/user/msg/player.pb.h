// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef PROTOBUF_player_2eproto__INCLUDED
#define PROTOBUF_player_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace zhu {
namespace user {
class LoginReq;
class LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginResp;
class LoginRespDefaultTypeInternal;
extern LoginRespDefaultTypeInternal _LoginResp_default_instance_;
class LogoutReq;
class LogoutReqDefaultTypeInternal;
extern LogoutReqDefaultTypeInternal _LogoutReq_default_instance_;
class LogoutResp;
class LogoutRespDefaultTypeInternal;
extern LogoutRespDefaultTypeInternal _LogoutResp_default_instance_;
class OnlineOfflineNotify;
class OnlineOfflineNotifyDefaultTypeInternal;
extern OnlineOfflineNotifyDefaultTypeInternal _OnlineOfflineNotify_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Player_PhoneNumber;
class Player_PhoneNumberDefaultTypeInternal;
extern Player_PhoneNumberDefaultTypeInternal _Player_PhoneNumber_default_instance_;
}  // namespace user
}  // namespace zhu

namespace zhu {
namespace user {

namespace protobuf_player_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_player_2eproto

enum Player_SexType {
  Player_SexType_MALE = 0,
  Player_SexType_FEMALE = 1
};
bool Player_SexType_IsValid(int value);
const Player_SexType Player_SexType_SexType_MIN = Player_SexType_MALE;
const Player_SexType Player_SexType_SexType_MAX = Player_SexType_FEMALE;
const int Player_SexType_SexType_ARRAYSIZE = Player_SexType_SexType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Player_SexType_descriptor();
inline const ::std::string& Player_SexType_Name(Player_SexType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Player_SexType_descriptor(), value);
}
inline bool Player_SexType_Parse(
    const ::std::string& name, Player_SexType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Player_SexType>(
    Player_SexType_descriptor(), name, value);
}
enum Player_PhoneType {
  Player_PhoneType_MOBILE = 0,
  Player_PhoneType_HOME = 1,
  Player_PhoneType_WORK = 2
};
bool Player_PhoneType_IsValid(int value);
const Player_PhoneType Player_PhoneType_PhoneType_MIN = Player_PhoneType_MOBILE;
const Player_PhoneType Player_PhoneType_PhoneType_MAX = Player_PhoneType_WORK;
const int Player_PhoneType_PhoneType_ARRAYSIZE = Player_PhoneType_PhoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Player_PhoneType_descriptor();
inline const ::std::string& Player_PhoneType_Name(Player_PhoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Player_PhoneType_descriptor(), value);
}
inline bool Player_PhoneType_Parse(
    const ::std::string& name, Player_PhoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Player_PhoneType>(
    Player_PhoneType_descriptor(), name, value);
}
enum UserStatus {
  OFFLINE = 0,
  ONLINE = 1,
  FORBIDDEN = 2
};
bool UserStatus_IsValid(int value);
const UserStatus UserStatus_MIN = OFFLINE;
const UserStatus UserStatus_MAX = FORBIDDEN;
const int UserStatus_ARRAYSIZE = UserStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserStatus_descriptor();
inline const ::std::string& UserStatus_Name(UserStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserStatus_descriptor(), value);
}
inline bool UserStatus_Parse(
    const ::std::string& name, UserStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserStatus>(
    UserStatus_descriptor(), name, value);
}
enum ERROR_CODE {
  SUCCESS = 0,
  ACCOUNT_NOT_EXIST = 1,
  ACCOUNT_OR_PASSWD_ERROR = 2,
  ALREADY_LOGON = 3,
  ILLEGAL_PARAM = 4,
  SERVER_ERROR = 5
};
bool ERROR_CODE_IsValid(int value);
const ERROR_CODE ERROR_CODE_MIN = SUCCESS;
const ERROR_CODE ERROR_CODE_MAX = SERVER_ERROR;
const int ERROR_CODE_ARRAYSIZE = ERROR_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERROR_CODE_descriptor();
inline const ::std::string& ERROR_CODE_Name(ERROR_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERROR_CODE_descriptor(), value);
}
inline bool ERROR_CODE_Parse(
    const ::std::string& name, ERROR_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERROR_CODE>(
    ERROR_CODE_descriptor(), name, value);
}
// ===================================================================

class LoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zhu.user.LoginReq) */ {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReq& default_instance();

  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LoginReq* other);

  // implements Message ----------------------------------------------

  inline LoginReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // required bytes password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional bytes verifyCode = 3;
  bool has_verifycode() const;
  void clear_verifycode();
  static const int kVerifyCodeFieldNumber = 3;
  const ::std::string& verifycode() const;
  void set_verifycode(const ::std::string& value);
  #if LANG_CXX11
  void set_verifycode(::std::string&& value);
  #endif
  void set_verifycode(const char* value);
  void set_verifycode(const void* value, size_t size);
  ::std::string* mutable_verifycode();
  ::std::string* release_verifycode();
  void set_allocated_verifycode(::std::string* verifycode);

  // @@protoc_insertion_point(class_scope:zhu.user.LoginReq)
 private:
  void set_has_account();
  void clear_has_account();
  void set_has_password();
  void clear_has_password();
  void set_has_verifycode();
  void clear_has_verifycode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr verifycode_;
  friend struct protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zhu.user.LoginResp) */ {
 public:
  LoginResp();
  virtual ~LoginResp();

  LoginResp(const LoginResp& from);

  inline LoginResp& operator=(const LoginResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResp& default_instance();

  static inline const LoginResp* internal_default_instance() {
    return reinterpret_cast<const LoginResp*>(
               &_LoginResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LoginResp* other);

  // implements Message ----------------------------------------------

  inline LoginResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginResp& from);
  void MergeFrom(const LoginResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes desc = 2;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 2;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // optional bytes account = 4;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 4;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // required .zhu.user.ERROR_CODE loginResult = 1;
  bool has_loginresult() const;
  void clear_loginresult();
  static const int kLoginResultFieldNumber = 1;
  ::zhu::user::ERROR_CODE loginresult() const;
  void set_loginresult(::zhu::user::ERROR_CODE value);

  // optional uint32 id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zhu.user.LoginResp)
 private:
  void set_has_loginresult();
  void clear_has_loginresult();
  void set_has_desc();
  void clear_has_desc();
  void set_has_id();
  void clear_has_id();
  void set_has_account();
  void clear_has_account();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  int loginresult_;
  ::google::protobuf::uint32 id_;
  friend struct protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zhu.user.LogoutReq) */ {
 public:
  LogoutReq();
  virtual ~LogoutReq();

  LogoutReq(const LogoutReq& from);

  inline LogoutReq& operator=(const LogoutReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutReq& default_instance();

  static inline const LogoutReq* internal_default_instance() {
    return reinterpret_cast<const LogoutReq*>(
               &_LogoutReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LogoutReq* other);

  // implements Message ----------------------------------------------

  inline LogoutReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutReq& from);
  void MergeFrom(const LogoutReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes account = 2;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zhu.user.LogoutReq)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_account();
  void clear_has_account();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::uint32 id_;
  friend struct protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zhu.user.LogoutResp) */ {
 public:
  LogoutResp();
  virtual ~LogoutResp();

  LogoutResp(const LogoutResp& from);

  inline LogoutResp& operator=(const LogoutResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutResp& default_instance();

  static inline const LogoutResp* internal_default_instance() {
    return reinterpret_cast<const LogoutResp*>(
               &_LogoutResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LogoutResp* other);

  // implements Message ----------------------------------------------

  inline LogoutResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutResp& from);
  void MergeFrom(const LogoutResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .zhu.user.ERROR_CODE logoutResult = 1;
  bool has_logoutresult() const;
  void clear_logoutresult();
  static const int kLogoutResultFieldNumber = 1;
  ::zhu::user::ERROR_CODE logoutresult() const;
  void set_logoutresult(::zhu::user::ERROR_CODE value);

  // @@protoc_insertion_point(class_scope:zhu.user.LogoutResp)
 private:
  void set_has_logoutresult();
  void clear_has_logoutresult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int logoutresult_;
  friend struct protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Player_PhoneNumber : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zhu.user.Player.PhoneNumber) */ {
 public:
  Player_PhoneNumber();
  virtual ~Player_PhoneNumber();

  Player_PhoneNumber(const Player_PhoneNumber& from);

  inline Player_PhoneNumber& operator=(const Player_PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player_PhoneNumber& default_instance();

  static inline const Player_PhoneNumber* internal_default_instance() {
    return reinterpret_cast<const Player_PhoneNumber*>(
               &_Player_PhoneNumber_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Player_PhoneNumber* other);

  // implements Message ----------------------------------------------

  inline Player_PhoneNumber* New() const PROTOBUF_FINAL { return New(NULL); }

  Player_PhoneNumber* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Player_PhoneNumber& from);
  void MergeFrom(const Player_PhoneNumber& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Player_PhoneNumber* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes number = 1;
  bool has_number() const;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  const ::std::string& number() const;
  void set_number(const ::std::string& value);
  #if LANG_CXX11
  void set_number(::std::string&& value);
  #endif
  void set_number(const char* value);
  void set_number(const void* value, size_t size);
  ::std::string* mutable_number();
  ::std::string* release_number();
  void set_allocated_number(::std::string* number);

  // optional .zhu.user.Player.PhoneType type = 2 [default = HOME];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::zhu::user::Player_PhoneType type() const;
  void set_type(::zhu::user::Player_PhoneType value);

  // @@protoc_insertion_point(class_scope:zhu.user.Player.PhoneNumber)
 private:
  void set_has_number();
  void clear_has_number();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr number_;
  int type_;
  friend struct protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zhu.user.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Player* other);

  // implements Message ----------------------------------------------

  inline Player* New() const PROTOBUF_FINAL { return New(NULL); }

  Player* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Player_PhoneNumber PhoneNumber;

  typedef Player_SexType SexType;
  static const SexType MALE =
    Player_SexType_MALE;
  static const SexType FEMALE =
    Player_SexType_FEMALE;
  static inline bool SexType_IsValid(int value) {
    return Player_SexType_IsValid(value);
  }
  static const SexType SexType_MIN =
    Player_SexType_SexType_MIN;
  static const SexType SexType_MAX =
    Player_SexType_SexType_MAX;
  static const int SexType_ARRAYSIZE =
    Player_SexType_SexType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SexType_descriptor() {
    return Player_SexType_descriptor();
  }
  static inline const ::std::string& SexType_Name(SexType value) {
    return Player_SexType_Name(value);
  }
  static inline bool SexType_Parse(const ::std::string& name,
      SexType* value) {
    return Player_SexType_Parse(name, value);
  }

  typedef Player_PhoneType PhoneType;
  static const PhoneType MOBILE =
    Player_PhoneType_MOBILE;
  static const PhoneType HOME =
    Player_PhoneType_HOME;
  static const PhoneType WORK =
    Player_PhoneType_WORK;
  static inline bool PhoneType_IsValid(int value) {
    return Player_PhoneType_IsValid(value);
  }
  static const PhoneType PhoneType_MIN =
    Player_PhoneType_PhoneType_MIN;
  static const PhoneType PhoneType_MAX =
    Player_PhoneType_PhoneType_MAX;
  static const int PhoneType_ARRAYSIZE =
    Player_PhoneType_PhoneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PhoneType_descriptor() {
    return Player_PhoneType_descriptor();
  }
  static inline const ::std::string& PhoneType_Name(PhoneType value) {
    return Player_PhoneType_Name(value);
  }
  static inline bool PhoneType_Parse(const ::std::string& name,
      PhoneType* value) {
    return Player_PhoneType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .zhu.user.Player.PhoneNumber phones = 8;
  int phones_size() const;
  void clear_phones();
  static const int kPhonesFieldNumber = 8;
  const ::zhu::user::Player_PhoneNumber& phones(int index) const;
  ::zhu::user::Player_PhoneNumber* mutable_phones(int index);
  ::zhu::user::Player_PhoneNumber* add_phones();
  ::google::protobuf::RepeatedPtrField< ::zhu::user::Player_PhoneNumber >*
      mutable_phones();
  const ::google::protobuf::RepeatedPtrField< ::zhu::user::Player_PhoneNumber >&
      phones() const;

  // required bytes account = 3;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 3;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // required bytes password = 4;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // required bytes name = 5;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes email = 6;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 6;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const void* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional bytes desc = 11;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 11;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const void* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional .zhu.user.Player.SexType sex = 7 [default = MALE];
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 7;
  ::zhu::user::Player_SexType sex() const;
  void set_sex(::zhu::user::Player_SexType value);

  // optional .zhu.user.UserStatus status = 9;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 9;
  ::zhu::user::UserStatus status() const;
  void set_status(::zhu::user::UserStatus value);

  // optional int32 money = 10;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 10;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // required int32 socket = 1 [default = -1];
  bool has_socket() const;
  void clear_socket();
  static const int kSocketFieldNumber = 1;
  ::google::protobuf::int32 socket() const;
  void set_socket(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zhu.user.Player)
 private:
  void set_has_socket();
  void clear_has_socket();
  void set_has_id();
  void clear_has_id();
  void set_has_account();
  void clear_has_account();
  void set_has_password();
  void clear_has_password();
  void set_has_name();
  void clear_has_name();
  void set_has_email();
  void clear_has_email();
  void set_has_sex();
  void clear_has_sex();
  void set_has_status();
  void clear_has_status();
  void set_has_money();
  void clear_has_money();
  void set_has_desc();
  void clear_has_desc();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::zhu::user::Player_PhoneNumber > phones_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::uint32 id_;
  int sex_;
  int status_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 socket_;
  friend struct protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OnlineOfflineNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zhu.user.OnlineOfflineNotify) */ {
 public:
  OnlineOfflineNotify();
  virtual ~OnlineOfflineNotify();

  OnlineOfflineNotify(const OnlineOfflineNotify& from);

  inline OnlineOfflineNotify& operator=(const OnlineOfflineNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OnlineOfflineNotify& default_instance();

  static inline const OnlineOfflineNotify* internal_default_instance() {
    return reinterpret_cast<const OnlineOfflineNotify*>(
               &_OnlineOfflineNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(OnlineOfflineNotify* other);

  // implements Message ----------------------------------------------

  inline OnlineOfflineNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  OnlineOfflineNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OnlineOfflineNotify& from);
  void MergeFrom(const OnlineOfflineNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OnlineOfflineNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // required bool online = 3;
  bool has_online() const;
  void clear_online();
  static const int kOnlineFieldNumber = 3;
  bool online() const;
  void set_online(bool value);

  // @@protoc_insertion_point(class_scope:zhu.user.OnlineOfflineNotify)
 private:
  void set_has_account();
  void clear_has_account();
  void set_has_online();
  void clear_has_online();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  bool online_;
  friend struct protobuf_player_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginReq

// required bytes account = 1;
inline bool LoginReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginReq::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& LoginReq::account() const {
  // @@protoc_insertion_point(field_get:zhu.user.LoginReq.account)
  return account_.GetNoArena();
}
inline void LoginReq::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.user.LoginReq.account)
}
#if LANG_CXX11
inline void LoginReq::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.user.LoginReq.account)
}
#endif
inline void LoginReq::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.user.LoginReq.account)
}
inline void LoginReq::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.user.LoginReq.account)
}
inline ::std::string* LoginReq::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:zhu.user.LoginReq.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReq::release_account() {
  // @@protoc_insertion_point(field_release:zhu.user.LoginReq.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:zhu.user.LoginReq.account)
}

// required bytes password = 2;
inline bool LoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& LoginReq::password() const {
  // @@protoc_insertion_point(field_get:zhu.user.LoginReq.password)
  return password_.GetNoArena();
}
inline void LoginReq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.user.LoginReq.password)
}
#if LANG_CXX11
inline void LoginReq::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.user.LoginReq.password)
}
#endif
inline void LoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.user.LoginReq.password)
}
inline void LoginReq::set_password(const void* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.user.LoginReq.password)
}
inline ::std::string* LoginReq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:zhu.user.LoginReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReq::release_password() {
  // @@protoc_insertion_point(field_release:zhu.user.LoginReq.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:zhu.user.LoginReq.password)
}

// optional bytes verifyCode = 3;
inline bool LoginReq::has_verifycode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginReq::set_has_verifycode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginReq::clear_has_verifycode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginReq::clear_verifycode() {
  verifycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycode();
}
inline const ::std::string& LoginReq::verifycode() const {
  // @@protoc_insertion_point(field_get:zhu.user.LoginReq.verifyCode)
  return verifycode_.GetNoArena();
}
inline void LoginReq::set_verifycode(const ::std::string& value) {
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.user.LoginReq.verifyCode)
}
#if LANG_CXX11
inline void LoginReq::set_verifycode(::std::string&& value) {
  set_has_verifycode();
  verifycode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.user.LoginReq.verifyCode)
}
#endif
inline void LoginReq::set_verifycode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.user.LoginReq.verifyCode)
}
inline void LoginReq::set_verifycode(const void* value, size_t size) {
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.user.LoginReq.verifyCode)
}
inline ::std::string* LoginReq::mutable_verifycode() {
  set_has_verifycode();
  // @@protoc_insertion_point(field_mutable:zhu.user.LoginReq.verifyCode)
  return verifycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReq::release_verifycode() {
  // @@protoc_insertion_point(field_release:zhu.user.LoginReq.verifyCode)
  clear_has_verifycode();
  return verifycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_verifycode(::std::string* verifycode) {
  if (verifycode != NULL) {
    set_has_verifycode();
  } else {
    clear_has_verifycode();
  }
  verifycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycode);
  // @@protoc_insertion_point(field_set_allocated:zhu.user.LoginReq.verifyCode)
}

// -------------------------------------------------------------------

// LoginResp

// required .zhu.user.ERROR_CODE loginResult = 1;
inline bool LoginResp::has_loginresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginResp::set_has_loginresult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginResp::clear_has_loginresult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginResp::clear_loginresult() {
  loginresult_ = 0;
  clear_has_loginresult();
}
inline ::zhu::user::ERROR_CODE LoginResp::loginresult() const {
  // @@protoc_insertion_point(field_get:zhu.user.LoginResp.loginResult)
  return static_cast< ::zhu::user::ERROR_CODE >(loginresult_);
}
inline void LoginResp::set_loginresult(::zhu::user::ERROR_CODE value) {
  assert(::zhu::user::ERROR_CODE_IsValid(value));
  set_has_loginresult();
  loginresult_ = value;
  // @@protoc_insertion_point(field_set:zhu.user.LoginResp.loginResult)
}

// optional bytes desc = 2;
inline bool LoginResp::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResp::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResp::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResp::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
inline const ::std::string& LoginResp::desc() const {
  // @@protoc_insertion_point(field_get:zhu.user.LoginResp.desc)
  return desc_.GetNoArena();
}
inline void LoginResp::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.user.LoginResp.desc)
}
#if LANG_CXX11
inline void LoginResp::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.user.LoginResp.desc)
}
#endif
inline void LoginResp::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.user.LoginResp.desc)
}
inline void LoginResp::set_desc(const void* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.user.LoginResp.desc)
}
inline ::std::string* LoginResp::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:zhu.user.LoginResp.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResp::release_desc() {
  // @@protoc_insertion_point(field_release:zhu.user.LoginResp.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResp::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:zhu.user.LoginResp.desc)
}

// optional uint32 id = 3;
inline bool LoginResp::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginResp::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginResp::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginResp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 LoginResp::id() const {
  // @@protoc_insertion_point(field_get:zhu.user.LoginResp.id)
  return id_;
}
inline void LoginResp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:zhu.user.LoginResp.id)
}

// optional bytes account = 4;
inline bool LoginResp::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResp::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResp::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResp::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& LoginResp::account() const {
  // @@protoc_insertion_point(field_get:zhu.user.LoginResp.account)
  return account_.GetNoArena();
}
inline void LoginResp::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.user.LoginResp.account)
}
#if LANG_CXX11
inline void LoginResp::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.user.LoginResp.account)
}
#endif
inline void LoginResp::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.user.LoginResp.account)
}
inline void LoginResp::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.user.LoginResp.account)
}
inline ::std::string* LoginResp::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:zhu.user.LoginResp.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResp::release_account() {
  // @@protoc_insertion_point(field_release:zhu.user.LoginResp.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResp::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:zhu.user.LoginResp.account)
}

// -------------------------------------------------------------------

// LogoutReq

// required uint32 id = 1;
inline bool LogoutReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogoutReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogoutReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogoutReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 LogoutReq::id() const {
  // @@protoc_insertion_point(field_get:zhu.user.LogoutReq.id)
  return id_;
}
inline void LogoutReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:zhu.user.LogoutReq.id)
}

// required bytes account = 2;
inline bool LogoutReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutReq::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& LogoutReq::account() const {
  // @@protoc_insertion_point(field_get:zhu.user.LogoutReq.account)
  return account_.GetNoArena();
}
inline void LogoutReq::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.user.LogoutReq.account)
}
#if LANG_CXX11
inline void LogoutReq::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.user.LogoutReq.account)
}
#endif
inline void LogoutReq::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.user.LogoutReq.account)
}
inline void LogoutReq::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.user.LogoutReq.account)
}
inline ::std::string* LogoutReq::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:zhu.user.LogoutReq.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogoutReq::release_account() {
  // @@protoc_insertion_point(field_release:zhu.user.LogoutReq.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutReq::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:zhu.user.LogoutReq.account)
}

// -------------------------------------------------------------------

// LogoutResp

// required .zhu.user.ERROR_CODE logoutResult = 1;
inline bool LogoutResp::has_logoutresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutResp::set_has_logoutresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutResp::clear_has_logoutresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutResp::clear_logoutresult() {
  logoutresult_ = 0;
  clear_has_logoutresult();
}
inline ::zhu::user::ERROR_CODE LogoutResp::logoutresult() const {
  // @@protoc_insertion_point(field_get:zhu.user.LogoutResp.logoutResult)
  return static_cast< ::zhu::user::ERROR_CODE >(logoutresult_);
}
inline void LogoutResp::set_logoutresult(::zhu::user::ERROR_CODE value) {
  assert(::zhu::user::ERROR_CODE_IsValid(value));
  set_has_logoutresult();
  logoutresult_ = value;
  // @@protoc_insertion_point(field_set:zhu.user.LogoutResp.logoutResult)
}

// -------------------------------------------------------------------

// Player_PhoneNumber

// required bytes number = 1;
inline bool Player_PhoneNumber::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player_PhoneNumber::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player_PhoneNumber::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player_PhoneNumber::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_number();
}
inline const ::std::string& Player_PhoneNumber::number() const {
  // @@protoc_insertion_point(field_get:zhu.user.Player.PhoneNumber.number)
  return number_.GetNoArena();
}
inline void Player_PhoneNumber::set_number(const ::std::string& value) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.user.Player.PhoneNumber.number)
}
#if LANG_CXX11
inline void Player_PhoneNumber::set_number(::std::string&& value) {
  set_has_number();
  number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.user.Player.PhoneNumber.number)
}
#endif
inline void Player_PhoneNumber::set_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.user.Player.PhoneNumber.number)
}
inline void Player_PhoneNumber::set_number(const void* value, size_t size) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.user.Player.PhoneNumber.number)
}
inline ::std::string* Player_PhoneNumber::mutable_number() {
  set_has_number();
  // @@protoc_insertion_point(field_mutable:zhu.user.Player.PhoneNumber.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player_PhoneNumber::release_number() {
  // @@protoc_insertion_point(field_release:zhu.user.Player.PhoneNumber.number)
  clear_has_number();
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player_PhoneNumber::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    set_has_number();
  } else {
    clear_has_number();
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:zhu.user.Player.PhoneNumber.number)
}

// optional .zhu.user.Player.PhoneType type = 2 [default = HOME];
inline bool Player_PhoneNumber::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player_PhoneNumber::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player_PhoneNumber::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player_PhoneNumber::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::zhu::user::Player_PhoneType Player_PhoneNumber::type() const {
  // @@protoc_insertion_point(field_get:zhu.user.Player.PhoneNumber.type)
  return static_cast< ::zhu::user::Player_PhoneType >(type_);
}
inline void Player_PhoneNumber::set_type(::zhu::user::Player_PhoneType value) {
  assert(::zhu::user::Player_PhoneType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:zhu.user.Player.PhoneNumber.type)
}

// -------------------------------------------------------------------

// Player

// required int32 socket = 1 [default = -1];
inline bool Player::has_socket() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Player::set_has_socket() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Player::clear_has_socket() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Player::clear_socket() {
  socket_ = -1;
  clear_has_socket();
}
inline ::google::protobuf::int32 Player::socket() const {
  // @@protoc_insertion_point(field_get:zhu.user.Player.socket)
  return socket_;
}
inline void Player::set_socket(::google::protobuf::int32 value) {
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:zhu.user.Player.socket)
}

// required uint32 id = 2 [default = 0];
inline bool Player::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Player::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Player::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Player::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Player::id() const {
  // @@protoc_insertion_point(field_get:zhu.user.Player.id)
  return id_;
}
inline void Player::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:zhu.user.Player.id)
}

// required bytes account = 3;
inline bool Player::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& Player::account() const {
  // @@protoc_insertion_point(field_get:zhu.user.Player.account)
  return account_.GetNoArena();
}
inline void Player::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.user.Player.account)
}
#if LANG_CXX11
inline void Player::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.user.Player.account)
}
#endif
inline void Player::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.user.Player.account)
}
inline void Player::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.user.Player.account)
}
inline ::std::string* Player::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:zhu.user.Player.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_account() {
  // @@protoc_insertion_point(field_release:zhu.user.Player.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:zhu.user.Player.account)
}

// required bytes password = 4;
inline bool Player::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& Player::password() const {
  // @@protoc_insertion_point(field_get:zhu.user.Player.password)
  return password_.GetNoArena();
}
inline void Player::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.user.Player.password)
}
#if LANG_CXX11
inline void Player::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.user.Player.password)
}
#endif
inline void Player::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.user.Player.password)
}
inline void Player::set_password(const void* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.user.Player.password)
}
inline ::std::string* Player::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:zhu.user.Player.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_password() {
  // @@protoc_insertion_point(field_release:zhu.user.Player.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:zhu.user.Player.password)
}

// required bytes name = 5;
inline bool Player::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:zhu.user.Player.name)
  return name_.GetNoArena();
}
inline void Player::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.user.Player.name)
}
#if LANG_CXX11
inline void Player::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.user.Player.name)
}
#endif
inline void Player::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.user.Player.name)
}
inline void Player::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.user.Player.name)
}
inline ::std::string* Player::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:zhu.user.Player.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:zhu.user.Player.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zhu.user.Player.name)
}

// optional bytes email = 6;
inline bool Player::has_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Player::set_has_email() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Player::clear_has_email() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Player::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& Player::email() const {
  // @@protoc_insertion_point(field_get:zhu.user.Player.email)
  return email_.GetNoArena();
}
inline void Player::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.user.Player.email)
}
#if LANG_CXX11
inline void Player::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.user.Player.email)
}
#endif
inline void Player::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.user.Player.email)
}
inline void Player::set_email(const void* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.user.Player.email)
}
inline ::std::string* Player::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:zhu.user.Player.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_email() {
  // @@protoc_insertion_point(field_release:zhu.user.Player.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:zhu.user.Player.email)
}

// optional .zhu.user.Player.SexType sex = 7 [default = MALE];
inline bool Player::has_sex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Player::set_has_sex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Player::clear_has_sex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Player::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::zhu::user::Player_SexType Player::sex() const {
  // @@protoc_insertion_point(field_get:zhu.user.Player.sex)
  return static_cast< ::zhu::user::Player_SexType >(sex_);
}
inline void Player::set_sex(::zhu::user::Player_SexType value) {
  assert(::zhu::user::Player_SexType_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:zhu.user.Player.sex)
}

// repeated .zhu.user.Player.PhoneNumber phones = 8;
inline int Player::phones_size() const {
  return phones_.size();
}
inline void Player::clear_phones() {
  phones_.Clear();
}
inline const ::zhu::user::Player_PhoneNumber& Player::phones(int index) const {
  // @@protoc_insertion_point(field_get:zhu.user.Player.phones)
  return phones_.Get(index);
}
inline ::zhu::user::Player_PhoneNumber* Player::mutable_phones(int index) {
  // @@protoc_insertion_point(field_mutable:zhu.user.Player.phones)
  return phones_.Mutable(index);
}
inline ::zhu::user::Player_PhoneNumber* Player::add_phones() {
  // @@protoc_insertion_point(field_add:zhu.user.Player.phones)
  return phones_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zhu::user::Player_PhoneNumber >*
Player::mutable_phones() {
  // @@protoc_insertion_point(field_mutable_list:zhu.user.Player.phones)
  return &phones_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zhu::user::Player_PhoneNumber >&
Player::phones() const {
  // @@protoc_insertion_point(field_list:zhu.user.Player.phones)
  return phones_;
}

// optional .zhu.user.UserStatus status = 9;
inline bool Player::has_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Player::set_has_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Player::clear_has_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Player::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::zhu::user::UserStatus Player::status() const {
  // @@protoc_insertion_point(field_get:zhu.user.Player.status)
  return static_cast< ::zhu::user::UserStatus >(status_);
}
inline void Player::set_status(::zhu::user::UserStatus value) {
  assert(::zhu::user::UserStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:zhu.user.Player.status)
}

// optional int32 money = 10;
inline bool Player::has_money() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Player::set_has_money() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Player::clear_has_money() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Player::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 Player::money() const {
  // @@protoc_insertion_point(field_get:zhu.user.Player.money)
  return money_;
}
inline void Player::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:zhu.user.Player.money)
}

// optional bytes desc = 11;
inline bool Player::has_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Player::set_has_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Player::clear_has_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Player::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
inline const ::std::string& Player::desc() const {
  // @@protoc_insertion_point(field_get:zhu.user.Player.desc)
  return desc_.GetNoArena();
}
inline void Player::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.user.Player.desc)
}
#if LANG_CXX11
inline void Player::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.user.Player.desc)
}
#endif
inline void Player::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.user.Player.desc)
}
inline void Player::set_desc(const void* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.user.Player.desc)
}
inline ::std::string* Player::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:zhu.user.Player.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_desc() {
  // @@protoc_insertion_point(field_release:zhu.user.Player.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:zhu.user.Player.desc)
}

// -------------------------------------------------------------------

// OnlineOfflineNotify

// required bytes account = 1;
inline bool OnlineOfflineNotify::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OnlineOfflineNotify::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OnlineOfflineNotify::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OnlineOfflineNotify::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& OnlineOfflineNotify::account() const {
  // @@protoc_insertion_point(field_get:zhu.user.OnlineOfflineNotify.account)
  return account_.GetNoArena();
}
inline void OnlineOfflineNotify::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.user.OnlineOfflineNotify.account)
}
#if LANG_CXX11
inline void OnlineOfflineNotify::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.user.OnlineOfflineNotify.account)
}
#endif
inline void OnlineOfflineNotify::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.user.OnlineOfflineNotify.account)
}
inline void OnlineOfflineNotify::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.user.OnlineOfflineNotify.account)
}
inline ::std::string* OnlineOfflineNotify::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:zhu.user.OnlineOfflineNotify.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnlineOfflineNotify::release_account() {
  // @@protoc_insertion_point(field_release:zhu.user.OnlineOfflineNotify.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnlineOfflineNotify::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:zhu.user.OnlineOfflineNotify.account)
}

// required bool online = 3;
inline bool OnlineOfflineNotify::has_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OnlineOfflineNotify::set_has_online() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OnlineOfflineNotify::clear_has_online() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OnlineOfflineNotify::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool OnlineOfflineNotify::online() const {
  // @@protoc_insertion_point(field_get:zhu.user.OnlineOfflineNotify.online)
  return online_;
}
inline void OnlineOfflineNotify::set_online(bool value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:zhu.user.OnlineOfflineNotify.online)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace user
}  // namespace zhu

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zhu::user::Player_SexType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zhu::user::Player_SexType>() {
  return ::zhu::user::Player_SexType_descriptor();
}
template <> struct is_proto_enum< ::zhu::user::Player_PhoneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zhu::user::Player_PhoneType>() {
  return ::zhu::user::Player_PhoneType_descriptor();
}
template <> struct is_proto_enum< ::zhu::user::UserStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zhu::user::UserStatus>() {
  return ::zhu::user::UserStatus_descriptor();
}
template <> struct is_proto_enum< ::zhu::user::ERROR_CODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zhu::user::ERROR_CODE>() {
  return ::zhu::user::ERROR_CODE_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_player_2eproto__INCLUDED
