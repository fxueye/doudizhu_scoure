// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: score.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "score.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zhu {
namespace score {
class ScoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Score> {
} _Score_default_instance_;
class SettleScoreRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SettleScoreResp> {
} _SettleScoreResp_default_instance_;
class CurrentMultipleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CurrentMultiple> {
} _CurrentMultiple_default_instance_;

namespace protobuf_score_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, score_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettleScoreResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettleScoreResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettleScoreResp, settleresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettleScoreResp, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettleScoreResp, currentscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettleScoreResp, totalscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettleScoreResp, multiple_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentMultiple, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentMultiple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentMultiple, multiple_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(Score)},
  { 9, 19, sizeof(SettleScoreResp)},
  { 24, 30, sizeof(CurrentMultiple)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Score_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SettleScoreResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CurrentMultiple_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "score.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _Score_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SettleScoreResp_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CurrentMultiple_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Score_default_instance_.DefaultConstruct();
  _SettleScoreResp_default_instance_.DefaultConstruct();
  _CurrentMultiple_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013score.proto\022\tzhu.score\"&\n\005Score\022\016\n\003uid"
      "\030\001 \002(\r:\0010\022\r\n\005score\030\002 \002(\002\"\210\001\n\017SettleScore"
      "Resp\022+\n\014settleResult\030\001 \002(\0162\025.zhu.score.E"
      "RROR_CODE\022\014\n\004desc\030\002 \001(\014\022\024\n\014currentScore\030"
      "\003 \001(\002\022\022\n\ntotalScore\030\004 \001(\002\022\020\n\010multiple\030\005 "
      "\001(\005\"#\n\017CurrentMultiple\022\020\n\010multiple\030\001 \001(\005"
      "*N\n\nERROR_CODE\022\013\n\007SUCCESS\020\000\022\016\n\nSAVE_ERRO"
      "R\020\001\022\021\n\rUSER_NOT_EXIT\020\002\022\020\n\014SERVER_ERROR\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "score.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_score_2eproto

const ::google::protobuf::EnumDescriptor* ERROR_CODE_descriptor() {
  protobuf_score_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_score_2eproto::file_level_enum_descriptors[0];
}
bool ERROR_CODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Score::kUidFieldNumber;
const int Score::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Score::Score()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_score_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhu.score.Score)
}
Score::Score(const Score& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&uid_) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:zhu.score.Score)
}

void Score::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&uid_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&uid_) + sizeof(score_));
}

Score::~Score() {
  // @@protoc_insertion_point(destructor:zhu.score.Score)
  SharedDtor();
}

void Score::SharedDtor() {
}

void Score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Score::descriptor() {
  protobuf_score_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_score_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Score& Score::default_instance() {
  protobuf_score_2eproto::InitDefaults();
  return *internal_default_instance();
}

Score* Score::New(::google::protobuf::Arena* arena) const {
  Score* n = new Score;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Score::Clear() {
// @@protoc_insertion_point(message_clear_start:zhu.score.Score)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&uid_, 0, reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&uid_) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhu.score.Score)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhu.score.Score)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhu.score.Score)
  return false;
#undef DO_
}

void Score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhu.score.Score)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required float score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhu.score.Score)
}

::google::protobuf::uint8* Score::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhu.score.Score)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required float score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhu.score.Score)
  return target;
}

size_t Score::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:zhu.score.Score)
  size_t total_size = 0;

  if (has_uid()) {
    // required uint32 uid = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  if (has_score()) {
    // required float score = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Score::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zhu.score.Score)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 uid = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

    // required float score = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Score::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zhu.score.Score)
  GOOGLE_DCHECK_NE(&from, this);
  const Score* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Score>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zhu.score.Score)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zhu.score.Score)
    MergeFrom(*source);
  }
}

void Score::MergeFrom(const Score& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zhu.score.Score)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Score::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zhu.score.Score)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Score::CopyFrom(const Score& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zhu.score.Score)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Score::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Score::Swap(Score* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Score::InternalSwap(Score* other) {
  std::swap(uid_, other->uid_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Score::GetMetadata() const {
  protobuf_score_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_score_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Score

// required uint32 uid = 1 [default = 0];
bool Score::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Score::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void Score::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Score::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 Score::uid() const {
  // @@protoc_insertion_point(field_get:zhu.score.Score.uid)
  return uid_;
}
void Score::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:zhu.score.Score.uid)
}

// required float score = 2;
bool Score::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Score::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void Score::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void Score::clear_score() {
  score_ = 0;
  clear_has_score();
}
float Score::score() const {
  // @@protoc_insertion_point(field_get:zhu.score.Score.score)
  return score_;
}
void Score::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:zhu.score.Score.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettleScoreResp::kSettleResultFieldNumber;
const int SettleScoreResp::kDescFieldNumber;
const int SettleScoreResp::kCurrentScoreFieldNumber;
const int SettleScoreResp::kTotalScoreFieldNumber;
const int SettleScoreResp::kMultipleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettleScoreResp::SettleScoreResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_score_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhu.score.SettleScoreResp)
}
SettleScoreResp::SettleScoreResp(const SettleScoreResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  ::memcpy(&settleresult_, &from.settleresult_,
    reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&settleresult_) + sizeof(multiple_));
  // @@protoc_insertion_point(copy_constructor:zhu.score.SettleScoreResp)
}

void SettleScoreResp::SharedCtor() {
  _cached_size_ = 0;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&settleresult_, 0, reinterpret_cast<char*>(&multiple_) -
    reinterpret_cast<char*>(&settleresult_) + sizeof(multiple_));
}

SettleScoreResp::~SettleScoreResp() {
  // @@protoc_insertion_point(destructor:zhu.score.SettleScoreResp)
  SharedDtor();
}

void SettleScoreResp::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SettleScoreResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SettleScoreResp::descriptor() {
  protobuf_score_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_score_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SettleScoreResp& SettleScoreResp::default_instance() {
  protobuf_score_2eproto::InitDefaults();
  return *internal_default_instance();
}

SettleScoreResp* SettleScoreResp::New(::google::protobuf::Arena* arena) const {
  SettleScoreResp* n = new SettleScoreResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SettleScoreResp::Clear() {
// @@protoc_insertion_point(message_clear_start:zhu.score.SettleScoreResp)
  if (has_desc()) {
    GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*desc_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&settleresult_, 0, reinterpret_cast<char*>(&multiple_) -
      reinterpret_cast<char*>(&settleresult_) + sizeof(multiple_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SettleScoreResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhu.score.SettleScoreResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .zhu.score.ERROR_CODE settleResult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zhu::score::ERROR_CODE_IsValid(value)) {
            set_settleresult(static_cast< ::zhu::score::ERROR_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float currentScore = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_currentscore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &currentscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float totalScore = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_totalscore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &totalscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 multiple = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_multiple();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhu.score.SettleScoreResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhu.score.SettleScoreResp)
  return false;
#undef DO_
}

void SettleScoreResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhu.score.SettleScoreResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .zhu.score.ERROR_CODE settleResult = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->settleresult(), output);
  }

  // optional bytes desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->desc(), output);
  }

  // optional float currentScore = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->currentscore(), output);
  }

  // optional float totalScore = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->totalscore(), output);
  }

  // optional int32 multiple = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->multiple(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhu.score.SettleScoreResp)
}

::google::protobuf::uint8* SettleScoreResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhu.score.SettleScoreResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .zhu.score.ERROR_CODE settleResult = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->settleresult(), target);
  }

  // optional bytes desc = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->desc(), target);
  }

  // optional float currentScore = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->currentscore(), target);
  }

  // optional float totalScore = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->totalscore(), target);
  }

  // optional int32 multiple = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->multiple(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhu.score.SettleScoreResp)
  return target;
}

size_t SettleScoreResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zhu.score.SettleScoreResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .zhu.score.ERROR_CODE settleResult = 1;
  if (has_settleresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->settleresult());
  }
  // optional bytes desc = 2;
  if (has_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->desc());
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional float currentScore = 3;
    if (has_currentscore()) {
      total_size += 1 + 4;
    }

    // optional float totalScore = 4;
    if (has_totalscore()) {
      total_size += 1 + 4;
    }

    // optional int32 multiple = 5;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multiple());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SettleScoreResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zhu.score.SettleScoreResp)
  GOOGLE_DCHECK_NE(&from, this);
  const SettleScoreResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SettleScoreResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zhu.score.SettleScoreResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zhu.score.SettleScoreResp)
    MergeFrom(*source);
  }
}

void SettleScoreResp::MergeFrom(const SettleScoreResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zhu.score.SettleScoreResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      settleresult_ = from.settleresult_;
    }
    if (cached_has_bits & 0x00000004u) {
      currentscore_ = from.currentscore_;
    }
    if (cached_has_bits & 0x00000008u) {
      totalscore_ = from.totalscore_;
    }
    if (cached_has_bits & 0x00000010u) {
      multiple_ = from.multiple_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SettleScoreResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zhu.score.SettleScoreResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettleScoreResp::CopyFrom(const SettleScoreResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zhu.score.SettleScoreResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettleScoreResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void SettleScoreResp::Swap(SettleScoreResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettleScoreResp::InternalSwap(SettleScoreResp* other) {
  desc_.Swap(&other->desc_);
  std::swap(settleresult_, other->settleresult_);
  std::swap(currentscore_, other->currentscore_);
  std::swap(totalscore_, other->totalscore_);
  std::swap(multiple_, other->multiple_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SettleScoreResp::GetMetadata() const {
  protobuf_score_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_score_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SettleScoreResp

// required .zhu.score.ERROR_CODE settleResult = 1;
bool SettleScoreResp::has_settleresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SettleScoreResp::set_has_settleresult() {
  _has_bits_[0] |= 0x00000002u;
}
void SettleScoreResp::clear_has_settleresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void SettleScoreResp::clear_settleresult() {
  settleresult_ = 0;
  clear_has_settleresult();
}
::zhu::score::ERROR_CODE SettleScoreResp::settleresult() const {
  // @@protoc_insertion_point(field_get:zhu.score.SettleScoreResp.settleResult)
  return static_cast< ::zhu::score::ERROR_CODE >(settleresult_);
}
void SettleScoreResp::set_settleresult(::zhu::score::ERROR_CODE value) {
  assert(::zhu::score::ERROR_CODE_IsValid(value));
  set_has_settleresult();
  settleresult_ = value;
  // @@protoc_insertion_point(field_set:zhu.score.SettleScoreResp.settleResult)
}

// optional bytes desc = 2;
bool SettleScoreResp::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SettleScoreResp::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
void SettleScoreResp::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
void SettleScoreResp::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& SettleScoreResp::desc() const {
  // @@protoc_insertion_point(field_get:zhu.score.SettleScoreResp.desc)
  return desc_.GetNoArena();
}
void SettleScoreResp::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.score.SettleScoreResp.desc)
}
#if LANG_CXX11
void SettleScoreResp::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.score.SettleScoreResp.desc)
}
#endif
void SettleScoreResp::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.score.SettleScoreResp.desc)
}
void SettleScoreResp::set_desc(const void* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.score.SettleScoreResp.desc)
}
::std::string* SettleScoreResp::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:zhu.score.SettleScoreResp.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SettleScoreResp::release_desc() {
  // @@protoc_insertion_point(field_release:zhu.score.SettleScoreResp.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SettleScoreResp::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:zhu.score.SettleScoreResp.desc)
}

// optional float currentScore = 3;
bool SettleScoreResp::has_currentscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SettleScoreResp::set_has_currentscore() {
  _has_bits_[0] |= 0x00000004u;
}
void SettleScoreResp::clear_has_currentscore() {
  _has_bits_[0] &= ~0x00000004u;
}
void SettleScoreResp::clear_currentscore() {
  currentscore_ = 0;
  clear_has_currentscore();
}
float SettleScoreResp::currentscore() const {
  // @@protoc_insertion_point(field_get:zhu.score.SettleScoreResp.currentScore)
  return currentscore_;
}
void SettleScoreResp::set_currentscore(float value) {
  set_has_currentscore();
  currentscore_ = value;
  // @@protoc_insertion_point(field_set:zhu.score.SettleScoreResp.currentScore)
}

// optional float totalScore = 4;
bool SettleScoreResp::has_totalscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SettleScoreResp::set_has_totalscore() {
  _has_bits_[0] |= 0x00000008u;
}
void SettleScoreResp::clear_has_totalscore() {
  _has_bits_[0] &= ~0x00000008u;
}
void SettleScoreResp::clear_totalscore() {
  totalscore_ = 0;
  clear_has_totalscore();
}
float SettleScoreResp::totalscore() const {
  // @@protoc_insertion_point(field_get:zhu.score.SettleScoreResp.totalScore)
  return totalscore_;
}
void SettleScoreResp::set_totalscore(float value) {
  set_has_totalscore();
  totalscore_ = value;
  // @@protoc_insertion_point(field_set:zhu.score.SettleScoreResp.totalScore)
}

// optional int32 multiple = 5;
bool SettleScoreResp::has_multiple() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SettleScoreResp::set_has_multiple() {
  _has_bits_[0] |= 0x00000010u;
}
void SettleScoreResp::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000010u;
}
void SettleScoreResp::clear_multiple() {
  multiple_ = 0;
  clear_has_multiple();
}
::google::protobuf::int32 SettleScoreResp::multiple() const {
  // @@protoc_insertion_point(field_get:zhu.score.SettleScoreResp.multiple)
  return multiple_;
}
void SettleScoreResp::set_multiple(::google::protobuf::int32 value) {
  set_has_multiple();
  multiple_ = value;
  // @@protoc_insertion_point(field_set:zhu.score.SettleScoreResp.multiple)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrentMultiple::kMultipleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrentMultiple::CurrentMultiple()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_score_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhu.score.CurrentMultiple)
}
CurrentMultiple::CurrentMultiple(const CurrentMultiple& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  multiple_ = from.multiple_;
  // @@protoc_insertion_point(copy_constructor:zhu.score.CurrentMultiple)
}

void CurrentMultiple::SharedCtor() {
  _cached_size_ = 0;
  multiple_ = 0;
}

CurrentMultiple::~CurrentMultiple() {
  // @@protoc_insertion_point(destructor:zhu.score.CurrentMultiple)
  SharedDtor();
}

void CurrentMultiple::SharedDtor() {
}

void CurrentMultiple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentMultiple::descriptor() {
  protobuf_score_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_score_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurrentMultiple& CurrentMultiple::default_instance() {
  protobuf_score_2eproto::InitDefaults();
  return *internal_default_instance();
}

CurrentMultiple* CurrentMultiple::New(::google::protobuf::Arena* arena) const {
  CurrentMultiple* n = new CurrentMultiple;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurrentMultiple::Clear() {
// @@protoc_insertion_point(message_clear_start:zhu.score.CurrentMultiple)
  multiple_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CurrentMultiple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhu.score.CurrentMultiple)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 multiple = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_multiple();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhu.score.CurrentMultiple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhu.score.CurrentMultiple)
  return false;
#undef DO_
}

void CurrentMultiple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhu.score.CurrentMultiple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 multiple = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->multiple(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhu.score.CurrentMultiple)
}

::google::protobuf::uint8* CurrentMultiple::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhu.score.CurrentMultiple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 multiple = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->multiple(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhu.score.CurrentMultiple)
  return target;
}

size_t CurrentMultiple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zhu.score.CurrentMultiple)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 multiple = 1;
  if (has_multiple()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiple());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentMultiple::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zhu.score.CurrentMultiple)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentMultiple* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrentMultiple>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zhu.score.CurrentMultiple)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zhu.score.CurrentMultiple)
    MergeFrom(*source);
  }
}

void CurrentMultiple::MergeFrom(const CurrentMultiple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zhu.score.CurrentMultiple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_multiple()) {
    set_multiple(from.multiple());
  }
}

void CurrentMultiple::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zhu.score.CurrentMultiple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentMultiple::CopyFrom(const CurrentMultiple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zhu.score.CurrentMultiple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentMultiple::IsInitialized() const {
  return true;
}

void CurrentMultiple::Swap(CurrentMultiple* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrentMultiple::InternalSwap(CurrentMultiple* other) {
  std::swap(multiple_, other->multiple_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurrentMultiple::GetMetadata() const {
  protobuf_score_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_score_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CurrentMultiple

// optional int32 multiple = 1;
bool CurrentMultiple::has_multiple() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CurrentMultiple::set_has_multiple() {
  _has_bits_[0] |= 0x00000001u;
}
void CurrentMultiple::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000001u;
}
void CurrentMultiple::clear_multiple() {
  multiple_ = 0;
  clear_has_multiple();
}
::google::protobuf::int32 CurrentMultiple::multiple() const {
  // @@protoc_insertion_point(field_get:zhu.score.CurrentMultiple.multiple)
  return multiple_;
}
void CurrentMultiple::set_multiple(::google::protobuf::int32 value) {
  set_has_multiple();
  multiple_ = value;
  // @@protoc_insertion_point(field_set:zhu.score.CurrentMultiple.multiple)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace score
}  // namespace zhu

// @@protoc_insertion_point(global_scope)
