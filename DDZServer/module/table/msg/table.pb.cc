// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: table.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "table.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zhu {
namespace table {
class PokerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Poker> {
} _Poker_default_instance_;
class PlayReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayReq> {
} _PlayReq_default_instance_;
class PlayRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayResp> {
} _PlayResp_default_instance_;
class RequestLandlordReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestLandlordReq> {
} _RequestLandlordReq_default_instance_;
class RequestLandlordRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestLandlordResp> {
} _RequestLandlordResp_default_instance_;
class DispatchPokerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DispatchPoker> {
} _DispatchPoker_default_instance_;
class PlayerOutDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayerOut> {
} _PlayerOut_default_instance_;

namespace protobuf_table_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poker, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poker, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poker, suit_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayReq, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayReq, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayReq, pokers_),
  1,
  0,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayResp, playresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayResp, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayResp, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayResp, next_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayResp, nextposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayResp, currentposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayResp, number_),
  3,
  0,
  1,
  2,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordReq, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordReq, call_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordReq, type_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordResp, calllandlordresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordResp, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordResp, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordResp, currentposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordResp, call_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordResp, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordResp, nexttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordResp, next_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLandlordResp, nextposition_),
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  2,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchPoker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchPoker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchPoker, pockers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchPoker, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchPoker, landlordaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchPoker, position_),
  ~0u,
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOut, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOut, errorresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOut, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOut, account_),
  2,
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(Poker)},
  { 11, 20, sizeof(PlayReq)},
  { 24, 36, sizeof(PlayResp)},
  { 43, 52, sizeof(RequestLandlordReq)},
  { 56, 70, sizeof(RequestLandlordResp)},
  { 79, 88, sizeof(DispatchPoker)},
  { 92, 100, sizeof(PlayerOut)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Poker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestLandlordReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestLandlordResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DispatchPoker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerOut_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "table.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _Poker_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PlayReq_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PlayResp_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _RequestLandlordReq_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _RequestLandlordResp_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _DispatchPoker_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _PlayerOut_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Poker_default_instance_.DefaultConstruct();
  _PlayReq_default_instance_.DefaultConstruct();
  _PlayResp_default_instance_.DefaultConstruct();
  _RequestLandlordReq_default_instance_.DefaultConstruct();
  _RequestLandlordResp_default_instance_.DefaultConstruct();
  _DispatchPoker_default_instance_.DefaultConstruct();
  _PlayerOut_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013table.proto\022\tzhu.table\"K\n\005Poker\022\016\n\006num"
      "ber\030\001 \002(\r\022\r\n\005value\030\002 \002(\005\022#\n\004suit\030\003 \002(\0162\025"
      ".zhu.table.POKER_SUIT\"p\n\007PlayReq\022\016\n\006room"
      "Id\030\001 \002(\r\022\017\n\007account\030\002 \002(\014\022\"\n\004type\030\003 \002(\0162"
      "\024.zhu.table.PLAY_TYPE\022 \n\006pokers\030\004 \003(\0132\020."
      "zhu.table.Poker\"\241\001\n\010PlayResp\022)\n\nplayResu"
      "lt\030\001 \002(\0162\025.zhu.table.ERROR_CODE\022\014\n\004desc\030"
      "\002 \001(\014\022\017\n\007account\030\003 \001(\014\022\014\n\004next\030\004 \001(\014\022\024\n\014"
      "nextPosition\030\005 \001(\r\022\027\n\017currentPosition\030\006 "
      "\001(\r\022\016\n\006number\030\007 \001(\r\"q\n\022RequestLandlordRe"
      "q\022\016\n\006roomId\030\001 \002(\r\022\017\n\007account\030\002 \002(\014\022\014\n\004ca"
      "ll\030\003 \002(\010\022,\n\004type\030\004 \001(\0162\036.zhu.table.Reque"
      "stLandlordType\"\222\002\n\023RequestLandlordResp\0221"
      "\n\022callLandlordResult\030\001 \002(\0162\025.zhu.table.E"
      "RROR_CODE\022\014\n\004desc\030\002 \001(\014\022\017\n\007account\030\003 \001(\014"
      "\022\027\n\017currentPosition\030\004 \001(\r\022\014\n\004call\030\005 \001(\010\022"
      ",\n\004type\030\006 \001(\0162\036.zhu.table.RequestLandlor"
      "dType\0220\n\010nextType\030\007 \001(\0162\036.zhu.table.Requ"
      "estLandlordType\022\014\n\004next\030\010 \001(\014\022\024\n\014nextPos"
      "ition\030\t \001(\r\"\211\001\n\rDispatchPoker\022!\n\007pockers"
      "\030\001 \003(\0132\020.zhu.table.Poker\022*\n\004type\030\002 \002(\0162\034"
      ".zhu.table.DispatchPokerType\022\027\n\017landlord"
      "Account\030\003 \001(\014\022\020\n\010position\030\004 \001(\r\"V\n\tPlaye"
      "rOut\022*\n\013errorResult\030\001 \002(\0162\025.zhu.table.ER"
      "ROR_CODE\022\014\n\004desc\030\002 \001(\014\022\017\n\007account\030\003 \001(\014*"
      "[\n\nPOKER_SUIT\022\t\n\005SPADE\020\000\022\t\n\005HEART\020\001\022\013\n\007D"
      "IAMOND\020\002\022\010\n\004CLUB\020\003\022\020\n\014SMALL_JACKER\020\004\022\016\n\n"
      "BIG_JACKER\020\005*\356\003\n\tPLAY_TYPE\022\021\n\rDOUBLE_JOC"
      "KER\020\000\022\010\n\004BOMB\020\001\022\n\n\006SINGLE\020\002\022\017\n\013DOUBLE_SA"
      "ME\020\003\022\016\n\nTHREE_SAME\020\004\022\027\n\023THREE_SAME_WITH_"
      "ONE\020\005\022\027\n\023THREE_SAME_WITH_TWO\020\006\022\023\n\017SINGLE"
      "_STRAIGHT\020\007\022\023\n\017DOUBLE_STRAIGHT\020\010\022\024\n\020BOMB"
      "_WIHT_SINGLE\020\t\022\024\n\020BOMB_WIHT_DOUBLE\020\n\022\r\n\t"
      "NO_PLAYER\020\013\022\025\n\021DOUBLE_THREE_SAME\020\014\022!\n\035DO"
      "UBLE_THREE_SAME_WITH_SINGLE\020\r\022!\n\035DOUBLE_"
      "THREE_SAME_WITH_DOUBLE\020\016\022\024\n\020THREE_THREE_"
      "SAME\020\017\022 \n\034THREE_THREE_SAME_WITH_SINGLE\020\020"
      "\022 \n\034THREE_THREE_SAME_WITH_DOUBLE\020\021\022\023\n\017FO"
      "UR_THREE_SAME\020\022\022\037\n\033FOUR_THREE_SAME_WITH_"
      "SINGLE\020\023\022\023\n\017FIVE_THREE_SAME\020\024*\253\002\n\nERROR_"
      "CODE\022\013\n\007SUCCESS\020\000\022\026\n\022NO_TURN_TO_REQUEST\020"
      "\001\022\023\n\017PLAY_TYPE_ERROR\020\002\022\020\n\014COMPARE_LOSE\020\003"
      "\022\013\n\007NO_PLAY\020\004\022\031\n\025CAN_NOT_CALL_LANDLORD\020\005"
      "\022\030\n\024NO_ONE_CALL_LANDLORD\020\006\022\031\n\025NOT_SELECT"
      "ED_LANDLORD\020\007\022\025\n\021SELECTED_LANDLORD\020\010\022\020\n\014"
      "LANDLORD_WIN\020\t\022\017\n\013PEASANT_WIN\020\n\022\023\n\017CAN_N"
      "OT_NO_PLAY\020\013\022\023\n\017PLAYER_OUT_GAME\020\014\022\020\n\014SER"
      "VER_ERROR\020\r*)\n\023RequestLandlordType\022\010\n\004RU"
      "SH\020\000\022\010\n\004CALL\020\001*\\\n\021DispatchPokerType\022\016\n\nD"
      "EAL_POKER\020\000\022\022\n\016LANDLORD_POKER\020\001\022\021\n\rCURRE"
      "NT_POKER\020\002\022\020\n\014PLAYER_POKER\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2028);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "table.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_table_2eproto

const ::google::protobuf::EnumDescriptor* POKER_SUIT_descriptor() {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_enum_descriptors[0];
}
bool POKER_SUIT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PLAY_TYPE_descriptor() {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_enum_descriptors[1];
}
bool PLAY_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERROR_CODE_descriptor() {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_enum_descriptors[2];
}
bool ERROR_CODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RequestLandlordType_descriptor() {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_enum_descriptors[3];
}
bool RequestLandlordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DispatchPokerType_descriptor() {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_enum_descriptors[4];
}
bool DispatchPokerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Poker::kNumberFieldNumber;
const int Poker::kValueFieldNumber;
const int Poker::kSuitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Poker::Poker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_table_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhu.table.Poker)
}
Poker::Poker(const Poker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&number_, &from.number_,
    reinterpret_cast<char*>(&suit_) -
    reinterpret_cast<char*>(&number_) + sizeof(suit_));
  // @@protoc_insertion_point(copy_constructor:zhu.table.Poker)
}

void Poker::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&number_, 0, reinterpret_cast<char*>(&suit_) -
    reinterpret_cast<char*>(&number_) + sizeof(suit_));
}

Poker::~Poker() {
  // @@protoc_insertion_point(destructor:zhu.table.Poker)
  SharedDtor();
}

void Poker::SharedDtor() {
}

void Poker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Poker::descriptor() {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Poker& Poker::default_instance() {
  protobuf_table_2eproto::InitDefaults();
  return *internal_default_instance();
}

Poker* Poker::New(::google::protobuf::Arena* arena) const {
  Poker* n = new Poker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Poker::Clear() {
// @@protoc_insertion_point(message_clear_start:zhu.table.Poker)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&number_, 0, reinterpret_cast<char*>(&suit_) -
      reinterpret_cast<char*>(&number_) + sizeof(suit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Poker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhu.table.Poker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .zhu.table.POKER_SUIT suit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zhu::table::POKER_SUIT_IsValid(value)) {
            set_suit(static_cast< ::zhu::table::POKER_SUIT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhu.table.Poker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhu.table.Poker)
  return false;
#undef DO_
}

void Poker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhu.table.Poker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // required .zhu.table.POKER_SUIT suit = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->suit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhu.table.Poker)
}

::google::protobuf::uint8* Poker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhu.table.Poker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  // required int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // required .zhu.table.POKER_SUIT suit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->suit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhu.table.Poker)
  return target;
}

size_t Poker::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:zhu.table.Poker)
  size_t total_size = 0;

  if (has_number()) {
    // required uint32 number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number());
  }

  if (has_value()) {
    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  if (has_suit()) {
    // required .zhu.table.POKER_SUIT suit = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->suit());
  }

  return total_size;
}
size_t Poker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zhu.table.Poker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number());

    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());

    // required .zhu.table.POKER_SUIT suit = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->suit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Poker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zhu.table.Poker)
  GOOGLE_DCHECK_NE(&from, this);
  const Poker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Poker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zhu.table.Poker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zhu.table.Poker)
    MergeFrom(*source);
  }
}

void Poker::MergeFrom(const Poker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zhu.table.Poker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      number_ = from.number_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      suit_ = from.suit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Poker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zhu.table.Poker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Poker::CopyFrom(const Poker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zhu.table.Poker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Poker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Poker::Swap(Poker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Poker::InternalSwap(Poker* other) {
  std::swap(number_, other->number_);
  std::swap(value_, other->value_);
  std::swap(suit_, other->suit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Poker::GetMetadata() const {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Poker

// required uint32 number = 1;
bool Poker::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Poker::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
void Poker::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void Poker::clear_number() {
  number_ = 0u;
  clear_has_number();
}
::google::protobuf::uint32 Poker::number() const {
  // @@protoc_insertion_point(field_get:zhu.table.Poker.number)
  return number_;
}
void Poker::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.Poker.number)
}

// required int32 value = 2;
bool Poker::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Poker::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Poker::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Poker::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 Poker::value() const {
  // @@protoc_insertion_point(field_get:zhu.table.Poker.value)
  return value_;
}
void Poker::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.Poker.value)
}

// required .zhu.table.POKER_SUIT suit = 3;
bool Poker::has_suit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Poker::set_has_suit() {
  _has_bits_[0] |= 0x00000004u;
}
void Poker::clear_has_suit() {
  _has_bits_[0] &= ~0x00000004u;
}
void Poker::clear_suit() {
  suit_ = 0;
  clear_has_suit();
}
::zhu::table::POKER_SUIT Poker::suit() const {
  // @@protoc_insertion_point(field_get:zhu.table.Poker.suit)
  return static_cast< ::zhu::table::POKER_SUIT >(suit_);
}
void Poker::set_suit(::zhu::table::POKER_SUIT value) {
  assert(::zhu::table::POKER_SUIT_IsValid(value));
  set_has_suit();
  suit_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.Poker.suit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayReq::kRoomIdFieldNumber;
const int PlayReq::kAccountFieldNumber;
const int PlayReq::kTypeFieldNumber;
const int PlayReq::kPokersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayReq::PlayReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_table_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhu.table.PlayReq)
}
PlayReq::PlayReq(const PlayReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pokers_(from.pokers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  ::memcpy(&roomid_, &from.roomid_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&roomid_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:zhu.table.PlayReq)
}

void PlayReq::SharedCtor() {
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&roomid_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&roomid_) + sizeof(type_));
}

PlayReq::~PlayReq() {
  // @@protoc_insertion_point(destructor:zhu.table.PlayReq)
  SharedDtor();
}

void PlayReq::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayReq::descriptor() {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayReq& PlayReq::default_instance() {
  protobuf_table_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayReq* PlayReq::New(::google::protobuf::Arena* arena) const {
  PlayReq* n = new PlayReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayReq::Clear() {
// @@protoc_insertion_point(message_clear_start:zhu.table.PlayReq)
  pokers_.Clear();
  if (has_account()) {
    GOOGLE_DCHECK(!account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*account_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&roomid_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&roomid_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhu.table.PlayReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 roomId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .zhu.table.PLAY_TYPE type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zhu::table::PLAY_TYPE_IsValid(value)) {
            set_type(static_cast< ::zhu::table::PLAY_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zhu.table.Poker pokers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pokers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhu.table.PlayReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhu.table.PlayReq)
  return false;
#undef DO_
}

void PlayReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhu.table.PlayReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 roomId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roomid(), output);
  }

  // required bytes account = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->account(), output);
  }

  // required .zhu.table.PLAY_TYPE type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .zhu.table.Poker pokers = 4;
  for (unsigned int i = 0, n = this->pokers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pokers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhu.table.PlayReq)
}

::google::protobuf::uint8* PlayReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhu.table.PlayReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 roomId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roomid(), target);
  }

  // required bytes account = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // required .zhu.table.PLAY_TYPE type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .zhu.table.Poker pokers = 4;
  for (unsigned int i = 0, n = this->pokers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->pokers(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhu.table.PlayReq)
  return target;
}

size_t PlayReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:zhu.table.PlayReq)
  size_t total_size = 0;

  if (has_account()) {
    // required bytes account = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());
  }

  if (has_roomid()) {
    // required uint32 roomId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());
  }

  if (has_type()) {
    // required .zhu.table.PLAY_TYPE type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t PlayReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zhu.table.PlayReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes account = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());

    // required uint32 roomId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());

    // required .zhu.table.PLAY_TYPE type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .zhu.table.Poker pokers = 4;
  {
    unsigned int count = this->pokers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pokers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zhu.table.PlayReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zhu.table.PlayReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zhu.table.PlayReq)
    MergeFrom(*source);
  }
}

void PlayReq::MergeFrom(const PlayReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zhu.table.PlayReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pokers_.MergeFrom(from.pokers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zhu.table.PlayReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayReq::CopyFrom(const PlayReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zhu.table.PlayReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pokers())) return false;
  return true;
}

void PlayReq::Swap(PlayReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayReq::InternalSwap(PlayReq* other) {
  pokers_.InternalSwap(&other->pokers_);
  account_.Swap(&other->account_);
  std::swap(roomid_, other->roomid_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayReq::GetMetadata() const {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayReq

// required uint32 roomId = 1;
bool PlayReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayReq::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
::google::protobuf::uint32 PlayReq::roomid() const {
  // @@protoc_insertion_point(field_get:zhu.table.PlayReq.roomId)
  return roomid_;
}
void PlayReq::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.PlayReq.roomId)
}

// required bytes account = 2;
bool PlayReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayReq::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
const ::std::string& PlayReq::account() const {
  // @@protoc_insertion_point(field_get:zhu.table.PlayReq.account)
  return account_.GetNoArena();
}
void PlayReq::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.table.PlayReq.account)
}
#if LANG_CXX11
void PlayReq::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.table.PlayReq.account)
}
#endif
void PlayReq::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.table.PlayReq.account)
}
void PlayReq::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.table.PlayReq.account)
}
::std::string* PlayReq::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:zhu.table.PlayReq.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayReq::release_account() {
  // @@protoc_insertion_point(field_release:zhu.table.PlayReq.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayReq::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:zhu.table.PlayReq.account)
}

// required .zhu.table.PLAY_TYPE type = 3;
bool PlayReq::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayReq::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
::zhu::table::PLAY_TYPE PlayReq::type() const {
  // @@protoc_insertion_point(field_get:zhu.table.PlayReq.type)
  return static_cast< ::zhu::table::PLAY_TYPE >(type_);
}
void PlayReq::set_type(::zhu::table::PLAY_TYPE value) {
  assert(::zhu::table::PLAY_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.PlayReq.type)
}

// repeated .zhu.table.Poker pokers = 4;
int PlayReq::pokers_size() const {
  return pokers_.size();
}
void PlayReq::clear_pokers() {
  pokers_.Clear();
}
const ::zhu::table::Poker& PlayReq::pokers(int index) const {
  // @@protoc_insertion_point(field_get:zhu.table.PlayReq.pokers)
  return pokers_.Get(index);
}
::zhu::table::Poker* PlayReq::mutable_pokers(int index) {
  // @@protoc_insertion_point(field_mutable:zhu.table.PlayReq.pokers)
  return pokers_.Mutable(index);
}
::zhu::table::Poker* PlayReq::add_pokers() {
  // @@protoc_insertion_point(field_add:zhu.table.PlayReq.pokers)
  return pokers_.Add();
}
::google::protobuf::RepeatedPtrField< ::zhu::table::Poker >*
PlayReq::mutable_pokers() {
  // @@protoc_insertion_point(field_mutable_list:zhu.table.PlayReq.pokers)
  return &pokers_;
}
const ::google::protobuf::RepeatedPtrField< ::zhu::table::Poker >&
PlayReq::pokers() const {
  // @@protoc_insertion_point(field_list:zhu.table.PlayReq.pokers)
  return pokers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayResp::kPlayResultFieldNumber;
const int PlayResp::kDescFieldNumber;
const int PlayResp::kAccountFieldNumber;
const int PlayResp::kNextFieldNumber;
const int PlayResp::kNextPositionFieldNumber;
const int PlayResp::kCurrentPositionFieldNumber;
const int PlayResp::kNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayResp::PlayResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_table_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhu.table.PlayResp)
}
PlayResp::PlayResp(const PlayResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  next_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_next()) {
    next_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_);
  }
  ::memcpy(&playresult_, &from.playresult_,
    reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&playresult_) + sizeof(number_));
  // @@protoc_insertion_point(copy_constructor:zhu.table.PlayResp)
}

void PlayResp::SharedCtor() {
  _cached_size_ = 0;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&playresult_, 0, reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&playresult_) + sizeof(number_));
}

PlayResp::~PlayResp() {
  // @@protoc_insertion_point(destructor:zhu.table.PlayResp)
  SharedDtor();
}

void PlayResp::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayResp::descriptor() {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayResp& PlayResp::default_instance() {
  protobuf_table_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayResp* PlayResp::New(::google::protobuf::Arena* arena) const {
  PlayResp* n = new PlayResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayResp::Clear() {
// @@protoc_insertion_point(message_clear_start:zhu.table.PlayResp)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_desc()) {
      GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*desc_.UnsafeRawStringPointer())->clear();
    }
    if (has_account()) {
      GOOGLE_DCHECK(!account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_.UnsafeRawStringPointer())->clear();
    }
    if (has_next()) {
      GOOGLE_DCHECK(!next_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*next_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&playresult_, 0, reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&playresult_) + sizeof(number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhu.table.PlayResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .zhu.table.ERROR_CODE playResult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zhu::table::ERROR_CODE_IsValid(value)) {
            set_playresult(static_cast< ::zhu::table::ERROR_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes next = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_next()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nextPosition = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_nextposition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 currentPosition = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_currentposition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhu.table.PlayResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhu.table.PlayResp)
  return false;
#undef DO_
}

void PlayResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhu.table.PlayResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .zhu.table.ERROR_CODE playResult = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->playresult(), output);
  }

  // optional bytes desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->desc(), output);
  }

  // optional bytes account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->account(), output);
  }

  // optional bytes next = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->next(), output);
  }

  // optional uint32 nextPosition = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nextposition(), output);
  }

  // optional uint32 currentPosition = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->currentposition(), output);
  }

  // optional uint32 number = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhu.table.PlayResp)
}

::google::protobuf::uint8* PlayResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhu.table.PlayResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .zhu.table.ERROR_CODE playResult = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->playresult(), target);
  }

  // optional bytes desc = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->desc(), target);
  }

  // optional bytes account = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->account(), target);
  }

  // optional bytes next = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->next(), target);
  }

  // optional uint32 nextPosition = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nextposition(), target);
  }

  // optional uint32 currentPosition = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->currentposition(), target);
  }

  // optional uint32 number = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhu.table.PlayResp)
  return target;
}

size_t PlayResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zhu.table.PlayResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .zhu.table.ERROR_CODE playResult = 1;
  if (has_playresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playresult());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

    // optional bytes account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes next = 4;
    if (has_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->next());
    }

  }
  if (_has_bits_[0 / 32] & 112u) {
    // optional uint32 nextPosition = 5;
    if (has_nextposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextposition());
    }

    // optional uint32 currentPosition = 6;
    if (has_currentposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentposition());
    }

    // optional uint32 number = 7;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zhu.table.PlayResp)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zhu.table.PlayResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zhu.table.PlayResp)
    MergeFrom(*source);
  }
}

void PlayResp::MergeFrom(const PlayResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zhu.table.PlayResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_next();
      next_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_);
    }
    if (cached_has_bits & 0x00000008u) {
      playresult_ = from.playresult_;
    }
    if (cached_has_bits & 0x00000010u) {
      nextposition_ = from.nextposition_;
    }
    if (cached_has_bits & 0x00000020u) {
      currentposition_ = from.currentposition_;
    }
    if (cached_has_bits & 0x00000040u) {
      number_ = from.number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zhu.table.PlayResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayResp::CopyFrom(const PlayResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zhu.table.PlayResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void PlayResp::Swap(PlayResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayResp::InternalSwap(PlayResp* other) {
  desc_.Swap(&other->desc_);
  account_.Swap(&other->account_);
  next_.Swap(&other->next_);
  std::swap(playresult_, other->playresult_);
  std::swap(nextposition_, other->nextposition_);
  std::swap(currentposition_, other->currentposition_);
  std::swap(number_, other->number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayResp::GetMetadata() const {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayResp

// required .zhu.table.ERROR_CODE playResult = 1;
bool PlayResp::has_playresult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayResp::set_has_playresult() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayResp::clear_has_playresult() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayResp::clear_playresult() {
  playresult_ = 0;
  clear_has_playresult();
}
::zhu::table::ERROR_CODE PlayResp::playresult() const {
  // @@protoc_insertion_point(field_get:zhu.table.PlayResp.playResult)
  return static_cast< ::zhu::table::ERROR_CODE >(playresult_);
}
void PlayResp::set_playresult(::zhu::table::ERROR_CODE value) {
  assert(::zhu::table::ERROR_CODE_IsValid(value));
  set_has_playresult();
  playresult_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.PlayResp.playResult)
}

// optional bytes desc = 2;
bool PlayResp::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayResp::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayResp::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayResp::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& PlayResp::desc() const {
  // @@protoc_insertion_point(field_get:zhu.table.PlayResp.desc)
  return desc_.GetNoArena();
}
void PlayResp::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.table.PlayResp.desc)
}
#if LANG_CXX11
void PlayResp::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.table.PlayResp.desc)
}
#endif
void PlayResp::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.table.PlayResp.desc)
}
void PlayResp::set_desc(const void* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.table.PlayResp.desc)
}
::std::string* PlayResp::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:zhu.table.PlayResp.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayResp::release_desc() {
  // @@protoc_insertion_point(field_release:zhu.table.PlayResp.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayResp::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:zhu.table.PlayResp.desc)
}

// optional bytes account = 3;
bool PlayResp::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayResp::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayResp::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayResp::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
const ::std::string& PlayResp::account() const {
  // @@protoc_insertion_point(field_get:zhu.table.PlayResp.account)
  return account_.GetNoArena();
}
void PlayResp::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.table.PlayResp.account)
}
#if LANG_CXX11
void PlayResp::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.table.PlayResp.account)
}
#endif
void PlayResp::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.table.PlayResp.account)
}
void PlayResp::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.table.PlayResp.account)
}
::std::string* PlayResp::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:zhu.table.PlayResp.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayResp::release_account() {
  // @@protoc_insertion_point(field_release:zhu.table.PlayResp.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayResp::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:zhu.table.PlayResp.account)
}

// optional bytes next = 4;
bool PlayResp::has_next() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayResp::set_has_next() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayResp::clear_has_next() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayResp::clear_next() {
  next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next();
}
const ::std::string& PlayResp::next() const {
  // @@protoc_insertion_point(field_get:zhu.table.PlayResp.next)
  return next_.GetNoArena();
}
void PlayResp::set_next(const ::std::string& value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.table.PlayResp.next)
}
#if LANG_CXX11
void PlayResp::set_next(::std::string&& value) {
  set_has_next();
  next_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.table.PlayResp.next)
}
#endif
void PlayResp::set_next(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.table.PlayResp.next)
}
void PlayResp::set_next(const void* value, size_t size) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.table.PlayResp.next)
}
::std::string* PlayResp::mutable_next() {
  set_has_next();
  // @@protoc_insertion_point(field_mutable:zhu.table.PlayResp.next)
  return next_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayResp::release_next() {
  // @@protoc_insertion_point(field_release:zhu.table.PlayResp.next)
  clear_has_next();
  return next_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayResp::set_allocated_next(::std::string* next) {
  if (next != NULL) {
    set_has_next();
  } else {
    clear_has_next();
  }
  next_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:zhu.table.PlayResp.next)
}

// optional uint32 nextPosition = 5;
bool PlayResp::has_nextposition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlayResp::set_has_nextposition() {
  _has_bits_[0] |= 0x00000010u;
}
void PlayResp::clear_has_nextposition() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlayResp::clear_nextposition() {
  nextposition_ = 0u;
  clear_has_nextposition();
}
::google::protobuf::uint32 PlayResp::nextposition() const {
  // @@protoc_insertion_point(field_get:zhu.table.PlayResp.nextPosition)
  return nextposition_;
}
void PlayResp::set_nextposition(::google::protobuf::uint32 value) {
  set_has_nextposition();
  nextposition_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.PlayResp.nextPosition)
}

// optional uint32 currentPosition = 6;
bool PlayResp::has_currentposition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlayResp::set_has_currentposition() {
  _has_bits_[0] |= 0x00000020u;
}
void PlayResp::clear_has_currentposition() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlayResp::clear_currentposition() {
  currentposition_ = 0u;
  clear_has_currentposition();
}
::google::protobuf::uint32 PlayResp::currentposition() const {
  // @@protoc_insertion_point(field_get:zhu.table.PlayResp.currentPosition)
  return currentposition_;
}
void PlayResp::set_currentposition(::google::protobuf::uint32 value) {
  set_has_currentposition();
  currentposition_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.PlayResp.currentPosition)
}

// optional uint32 number = 7;
bool PlayResp::has_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlayResp::set_has_number() {
  _has_bits_[0] |= 0x00000040u;
}
void PlayResp::clear_has_number() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlayResp::clear_number() {
  number_ = 0u;
  clear_has_number();
}
::google::protobuf::uint32 PlayResp::number() const {
  // @@protoc_insertion_point(field_get:zhu.table.PlayResp.number)
  return number_;
}
void PlayResp::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.PlayResp.number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestLandlordReq::kRoomIdFieldNumber;
const int RequestLandlordReq::kAccountFieldNumber;
const int RequestLandlordReq::kCallFieldNumber;
const int RequestLandlordReq::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestLandlordReq::RequestLandlordReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_table_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhu.table.RequestLandlordReq)
}
RequestLandlordReq::RequestLandlordReq(const RequestLandlordReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  ::memcpy(&roomid_, &from.roomid_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&roomid_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:zhu.table.RequestLandlordReq)
}

void RequestLandlordReq::SharedCtor() {
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&roomid_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&roomid_) + sizeof(type_));
}

RequestLandlordReq::~RequestLandlordReq() {
  // @@protoc_insertion_point(destructor:zhu.table.RequestLandlordReq)
  SharedDtor();
}

void RequestLandlordReq::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestLandlordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestLandlordReq::descriptor() {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestLandlordReq& RequestLandlordReq::default_instance() {
  protobuf_table_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestLandlordReq* RequestLandlordReq::New(::google::protobuf::Arena* arena) const {
  RequestLandlordReq* n = new RequestLandlordReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestLandlordReq::Clear() {
// @@protoc_insertion_point(message_clear_start:zhu.table.RequestLandlordReq)
  if (has_account()) {
    GOOGLE_DCHECK(!account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*account_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&roomid_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&roomid_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestLandlordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhu.table.RequestLandlordReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 roomId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_roomid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool call = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_call();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &call_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zhu.table.RequestLandlordType type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zhu::table::RequestLandlordType_IsValid(value)) {
            set_type(static_cast< ::zhu::table::RequestLandlordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhu.table.RequestLandlordReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhu.table.RequestLandlordReq)
  return false;
#undef DO_
}

void RequestLandlordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhu.table.RequestLandlordReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 roomId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roomid(), output);
  }

  // required bytes account = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->account(), output);
  }

  // required bool call = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->call(), output);
  }

  // optional .zhu.table.RequestLandlordType type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhu.table.RequestLandlordReq)
}

::google::protobuf::uint8* RequestLandlordReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhu.table.RequestLandlordReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 roomId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roomid(), target);
  }

  // required bytes account = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // required bool call = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->call(), target);
  }

  // optional .zhu.table.RequestLandlordType type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhu.table.RequestLandlordReq)
  return target;
}

size_t RequestLandlordReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:zhu.table.RequestLandlordReq)
  size_t total_size = 0;

  if (has_account()) {
    // required bytes account = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());
  }

  if (has_roomid()) {
    // required uint32 roomId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());
  }

  if (has_call()) {
    // required bool call = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RequestLandlordReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zhu.table.RequestLandlordReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes account = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());

    // required uint32 roomId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());

    // required bool call = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .zhu.table.RequestLandlordType type = 4;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestLandlordReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zhu.table.RequestLandlordReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestLandlordReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestLandlordReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zhu.table.RequestLandlordReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zhu.table.RequestLandlordReq)
    MergeFrom(*source);
  }
}

void RequestLandlordReq::MergeFrom(const RequestLandlordReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zhu.table.RequestLandlordReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000002u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000004u) {
      call_ = from.call_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestLandlordReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zhu.table.RequestLandlordReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestLandlordReq::CopyFrom(const RequestLandlordReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zhu.table.RequestLandlordReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLandlordReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RequestLandlordReq::Swap(RequestLandlordReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestLandlordReq::InternalSwap(RequestLandlordReq* other) {
  account_.Swap(&other->account_);
  std::swap(roomid_, other->roomid_);
  std::swap(call_, other->call_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestLandlordReq::GetMetadata() const {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestLandlordReq

// required uint32 roomId = 1;
bool RequestLandlordReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RequestLandlordReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
void RequestLandlordReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
void RequestLandlordReq::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
::google::protobuf::uint32 RequestLandlordReq::roomid() const {
  // @@protoc_insertion_point(field_get:zhu.table.RequestLandlordReq.roomId)
  return roomid_;
}
void RequestLandlordReq::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.RequestLandlordReq.roomId)
}

// required bytes account = 2;
bool RequestLandlordReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestLandlordReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestLandlordReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestLandlordReq::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
const ::std::string& RequestLandlordReq::account() const {
  // @@protoc_insertion_point(field_get:zhu.table.RequestLandlordReq.account)
  return account_.GetNoArena();
}
void RequestLandlordReq::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.table.RequestLandlordReq.account)
}
#if LANG_CXX11
void RequestLandlordReq::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.table.RequestLandlordReq.account)
}
#endif
void RequestLandlordReq::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.table.RequestLandlordReq.account)
}
void RequestLandlordReq::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.table.RequestLandlordReq.account)
}
::std::string* RequestLandlordReq::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:zhu.table.RequestLandlordReq.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestLandlordReq::release_account() {
  // @@protoc_insertion_point(field_release:zhu.table.RequestLandlordReq.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestLandlordReq::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:zhu.table.RequestLandlordReq.account)
}

// required bool call = 3;
bool RequestLandlordReq::has_call() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RequestLandlordReq::set_has_call() {
  _has_bits_[0] |= 0x00000004u;
}
void RequestLandlordReq::clear_has_call() {
  _has_bits_[0] &= ~0x00000004u;
}
void RequestLandlordReq::clear_call() {
  call_ = false;
  clear_has_call();
}
bool RequestLandlordReq::call() const {
  // @@protoc_insertion_point(field_get:zhu.table.RequestLandlordReq.call)
  return call_;
}
void RequestLandlordReq::set_call(bool value) {
  set_has_call();
  call_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.RequestLandlordReq.call)
}

// optional .zhu.table.RequestLandlordType type = 4;
bool RequestLandlordReq::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RequestLandlordReq::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void RequestLandlordReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void RequestLandlordReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
::zhu::table::RequestLandlordType RequestLandlordReq::type() const {
  // @@protoc_insertion_point(field_get:zhu.table.RequestLandlordReq.type)
  return static_cast< ::zhu::table::RequestLandlordType >(type_);
}
void RequestLandlordReq::set_type(::zhu::table::RequestLandlordType value) {
  assert(::zhu::table::RequestLandlordType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.RequestLandlordReq.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestLandlordResp::kCallLandlordResultFieldNumber;
const int RequestLandlordResp::kDescFieldNumber;
const int RequestLandlordResp::kAccountFieldNumber;
const int RequestLandlordResp::kCurrentPositionFieldNumber;
const int RequestLandlordResp::kCallFieldNumber;
const int RequestLandlordResp::kTypeFieldNumber;
const int RequestLandlordResp::kNextTypeFieldNumber;
const int RequestLandlordResp::kNextFieldNumber;
const int RequestLandlordResp::kNextPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestLandlordResp::RequestLandlordResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_table_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhu.table.RequestLandlordResp)
}
RequestLandlordResp::RequestLandlordResp(const RequestLandlordResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  next_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_next()) {
    next_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_);
  }
  ::memcpy(&calllandlordresult_, &from.calllandlordresult_,
    reinterpret_cast<char*>(&nextposition_) -
    reinterpret_cast<char*>(&calllandlordresult_) + sizeof(nextposition_));
  // @@protoc_insertion_point(copy_constructor:zhu.table.RequestLandlordResp)
}

void RequestLandlordResp::SharedCtor() {
  _cached_size_ = 0;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&calllandlordresult_, 0, reinterpret_cast<char*>(&nextposition_) -
    reinterpret_cast<char*>(&calllandlordresult_) + sizeof(nextposition_));
}

RequestLandlordResp::~RequestLandlordResp() {
  // @@protoc_insertion_point(destructor:zhu.table.RequestLandlordResp)
  SharedDtor();
}

void RequestLandlordResp::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestLandlordResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestLandlordResp::descriptor() {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestLandlordResp& RequestLandlordResp::default_instance() {
  protobuf_table_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestLandlordResp* RequestLandlordResp::New(::google::protobuf::Arena* arena) const {
  RequestLandlordResp* n = new RequestLandlordResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestLandlordResp::Clear() {
// @@protoc_insertion_point(message_clear_start:zhu.table.RequestLandlordResp)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_desc()) {
      GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*desc_.UnsafeRawStringPointer())->clear();
    }
    if (has_account()) {
      GOOGLE_DCHECK(!account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_.UnsafeRawStringPointer())->clear();
    }
    if (has_next()) {
      GOOGLE_DCHECK(!next_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*next_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&calllandlordresult_, 0, reinterpret_cast<char*>(&nexttype_) -
      reinterpret_cast<char*>(&calllandlordresult_) + sizeof(nexttype_));
  }
  nextposition_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestLandlordResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhu.table.RequestLandlordResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .zhu.table.ERROR_CODE callLandlordResult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zhu::table::ERROR_CODE_IsValid(value)) {
            set_calllandlordresult(static_cast< ::zhu::table::ERROR_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 currentPosition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_currentposition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool call = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_call();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &call_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zhu.table.RequestLandlordType type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zhu::table::RequestLandlordType_IsValid(value)) {
            set_type(static_cast< ::zhu::table::RequestLandlordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zhu.table.RequestLandlordType nextType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zhu::table::RequestLandlordType_IsValid(value)) {
            set_nexttype(static_cast< ::zhu::table::RequestLandlordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes next = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_next()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nextPosition = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_nextposition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhu.table.RequestLandlordResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhu.table.RequestLandlordResp)
  return false;
#undef DO_
}

void RequestLandlordResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhu.table.RequestLandlordResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .zhu.table.ERROR_CODE callLandlordResult = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->calllandlordresult(), output);
  }

  // optional bytes desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->desc(), output);
  }

  // optional bytes account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->account(), output);
  }

  // optional uint32 currentPosition = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->currentposition(), output);
  }

  // optional bool call = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->call(), output);
  }

  // optional .zhu.table.RequestLandlordType type = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // optional .zhu.table.RequestLandlordType nextType = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->nexttype(), output);
  }

  // optional bytes next = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->next(), output);
  }

  // optional uint32 nextPosition = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->nextposition(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhu.table.RequestLandlordResp)
}

::google::protobuf::uint8* RequestLandlordResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhu.table.RequestLandlordResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .zhu.table.ERROR_CODE callLandlordResult = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->calllandlordresult(), target);
  }

  // optional bytes desc = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->desc(), target);
  }

  // optional bytes account = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->account(), target);
  }

  // optional uint32 currentPosition = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->currentposition(), target);
  }

  // optional bool call = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->call(), target);
  }

  // optional .zhu.table.RequestLandlordType type = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // optional .zhu.table.RequestLandlordType nextType = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->nexttype(), target);
  }

  // optional bytes next = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->next(), target);
  }

  // optional uint32 nextPosition = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->nextposition(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhu.table.RequestLandlordResp)
  return target;
}

size_t RequestLandlordResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zhu.table.RequestLandlordResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .zhu.table.ERROR_CODE callLandlordResult = 1;
  if (has_calllandlordresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->calllandlordresult());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

    // optional bytes account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes next = 8;
    if (has_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->next());
    }

  }
  if (_has_bits_[0 / 32] & 240u) {
    // optional uint32 currentPosition = 4;
    if (has_currentposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentposition());
    }

    // optional bool call = 5;
    if (has_call()) {
      total_size += 1 + 1;
    }

    // optional .zhu.table.RequestLandlordType type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .zhu.table.RequestLandlordType nextType = 7;
    if (has_nexttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nexttype());
    }

  }
  // optional uint32 nextPosition = 9;
  if (has_nextposition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nextposition());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestLandlordResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zhu.table.RequestLandlordResp)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestLandlordResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestLandlordResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zhu.table.RequestLandlordResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zhu.table.RequestLandlordResp)
    MergeFrom(*source);
  }
}

void RequestLandlordResp::MergeFrom(const RequestLandlordResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zhu.table.RequestLandlordResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_next();
      next_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_);
    }
    if (cached_has_bits & 0x00000008u) {
      calllandlordresult_ = from.calllandlordresult_;
    }
    if (cached_has_bits & 0x00000010u) {
      currentposition_ = from.currentposition_;
    }
    if (cached_has_bits & 0x00000020u) {
      call_ = from.call_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      nexttype_ = from.nexttype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_nextposition(from.nextposition());
  }
}

void RequestLandlordResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zhu.table.RequestLandlordResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestLandlordResp::CopyFrom(const RequestLandlordResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zhu.table.RequestLandlordResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLandlordResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void RequestLandlordResp::Swap(RequestLandlordResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestLandlordResp::InternalSwap(RequestLandlordResp* other) {
  desc_.Swap(&other->desc_);
  account_.Swap(&other->account_);
  next_.Swap(&other->next_);
  std::swap(calllandlordresult_, other->calllandlordresult_);
  std::swap(currentposition_, other->currentposition_);
  std::swap(call_, other->call_);
  std::swap(type_, other->type_);
  std::swap(nexttype_, other->nexttype_);
  std::swap(nextposition_, other->nextposition_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestLandlordResp::GetMetadata() const {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestLandlordResp

// required .zhu.table.ERROR_CODE callLandlordResult = 1;
bool RequestLandlordResp::has_calllandlordresult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RequestLandlordResp::set_has_calllandlordresult() {
  _has_bits_[0] |= 0x00000008u;
}
void RequestLandlordResp::clear_has_calllandlordresult() {
  _has_bits_[0] &= ~0x00000008u;
}
void RequestLandlordResp::clear_calllandlordresult() {
  calllandlordresult_ = 0;
  clear_has_calllandlordresult();
}
::zhu::table::ERROR_CODE RequestLandlordResp::calllandlordresult() const {
  // @@protoc_insertion_point(field_get:zhu.table.RequestLandlordResp.callLandlordResult)
  return static_cast< ::zhu::table::ERROR_CODE >(calllandlordresult_);
}
void RequestLandlordResp::set_calllandlordresult(::zhu::table::ERROR_CODE value) {
  assert(::zhu::table::ERROR_CODE_IsValid(value));
  set_has_calllandlordresult();
  calllandlordresult_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.RequestLandlordResp.callLandlordResult)
}

// optional bytes desc = 2;
bool RequestLandlordResp::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestLandlordResp::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestLandlordResp::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestLandlordResp::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& RequestLandlordResp::desc() const {
  // @@protoc_insertion_point(field_get:zhu.table.RequestLandlordResp.desc)
  return desc_.GetNoArena();
}
void RequestLandlordResp::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.table.RequestLandlordResp.desc)
}
#if LANG_CXX11
void RequestLandlordResp::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.table.RequestLandlordResp.desc)
}
#endif
void RequestLandlordResp::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.table.RequestLandlordResp.desc)
}
void RequestLandlordResp::set_desc(const void* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.table.RequestLandlordResp.desc)
}
::std::string* RequestLandlordResp::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:zhu.table.RequestLandlordResp.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestLandlordResp::release_desc() {
  // @@protoc_insertion_point(field_release:zhu.table.RequestLandlordResp.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestLandlordResp::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:zhu.table.RequestLandlordResp.desc)
}

// optional bytes account = 3;
bool RequestLandlordResp::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RequestLandlordResp::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
void RequestLandlordResp::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
void RequestLandlordResp::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
const ::std::string& RequestLandlordResp::account() const {
  // @@protoc_insertion_point(field_get:zhu.table.RequestLandlordResp.account)
  return account_.GetNoArena();
}
void RequestLandlordResp::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.table.RequestLandlordResp.account)
}
#if LANG_CXX11
void RequestLandlordResp::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.table.RequestLandlordResp.account)
}
#endif
void RequestLandlordResp::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.table.RequestLandlordResp.account)
}
void RequestLandlordResp::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.table.RequestLandlordResp.account)
}
::std::string* RequestLandlordResp::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:zhu.table.RequestLandlordResp.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestLandlordResp::release_account() {
  // @@protoc_insertion_point(field_release:zhu.table.RequestLandlordResp.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestLandlordResp::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:zhu.table.RequestLandlordResp.account)
}

// optional uint32 currentPosition = 4;
bool RequestLandlordResp::has_currentposition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RequestLandlordResp::set_has_currentposition() {
  _has_bits_[0] |= 0x00000010u;
}
void RequestLandlordResp::clear_has_currentposition() {
  _has_bits_[0] &= ~0x00000010u;
}
void RequestLandlordResp::clear_currentposition() {
  currentposition_ = 0u;
  clear_has_currentposition();
}
::google::protobuf::uint32 RequestLandlordResp::currentposition() const {
  // @@protoc_insertion_point(field_get:zhu.table.RequestLandlordResp.currentPosition)
  return currentposition_;
}
void RequestLandlordResp::set_currentposition(::google::protobuf::uint32 value) {
  set_has_currentposition();
  currentposition_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.RequestLandlordResp.currentPosition)
}

// optional bool call = 5;
bool RequestLandlordResp::has_call() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RequestLandlordResp::set_has_call() {
  _has_bits_[0] |= 0x00000020u;
}
void RequestLandlordResp::clear_has_call() {
  _has_bits_[0] &= ~0x00000020u;
}
void RequestLandlordResp::clear_call() {
  call_ = false;
  clear_has_call();
}
bool RequestLandlordResp::call() const {
  // @@protoc_insertion_point(field_get:zhu.table.RequestLandlordResp.call)
  return call_;
}
void RequestLandlordResp::set_call(bool value) {
  set_has_call();
  call_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.RequestLandlordResp.call)
}

// optional .zhu.table.RequestLandlordType type = 6;
bool RequestLandlordResp::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RequestLandlordResp::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
void RequestLandlordResp::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void RequestLandlordResp::clear_type() {
  type_ = 0;
  clear_has_type();
}
::zhu::table::RequestLandlordType RequestLandlordResp::type() const {
  // @@protoc_insertion_point(field_get:zhu.table.RequestLandlordResp.type)
  return static_cast< ::zhu::table::RequestLandlordType >(type_);
}
void RequestLandlordResp::set_type(::zhu::table::RequestLandlordType value) {
  assert(::zhu::table::RequestLandlordType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.RequestLandlordResp.type)
}

// optional .zhu.table.RequestLandlordType nextType = 7;
bool RequestLandlordResp::has_nexttype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RequestLandlordResp::set_has_nexttype() {
  _has_bits_[0] |= 0x00000080u;
}
void RequestLandlordResp::clear_has_nexttype() {
  _has_bits_[0] &= ~0x00000080u;
}
void RequestLandlordResp::clear_nexttype() {
  nexttype_ = 0;
  clear_has_nexttype();
}
::zhu::table::RequestLandlordType RequestLandlordResp::nexttype() const {
  // @@protoc_insertion_point(field_get:zhu.table.RequestLandlordResp.nextType)
  return static_cast< ::zhu::table::RequestLandlordType >(nexttype_);
}
void RequestLandlordResp::set_nexttype(::zhu::table::RequestLandlordType value) {
  assert(::zhu::table::RequestLandlordType_IsValid(value));
  set_has_nexttype();
  nexttype_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.RequestLandlordResp.nextType)
}

// optional bytes next = 8;
bool RequestLandlordResp::has_next() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RequestLandlordResp::set_has_next() {
  _has_bits_[0] |= 0x00000004u;
}
void RequestLandlordResp::clear_has_next() {
  _has_bits_[0] &= ~0x00000004u;
}
void RequestLandlordResp::clear_next() {
  next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next();
}
const ::std::string& RequestLandlordResp::next() const {
  // @@protoc_insertion_point(field_get:zhu.table.RequestLandlordResp.next)
  return next_.GetNoArena();
}
void RequestLandlordResp::set_next(const ::std::string& value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.table.RequestLandlordResp.next)
}
#if LANG_CXX11
void RequestLandlordResp::set_next(::std::string&& value) {
  set_has_next();
  next_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.table.RequestLandlordResp.next)
}
#endif
void RequestLandlordResp::set_next(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.table.RequestLandlordResp.next)
}
void RequestLandlordResp::set_next(const void* value, size_t size) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.table.RequestLandlordResp.next)
}
::std::string* RequestLandlordResp::mutable_next() {
  set_has_next();
  // @@protoc_insertion_point(field_mutable:zhu.table.RequestLandlordResp.next)
  return next_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequestLandlordResp::release_next() {
  // @@protoc_insertion_point(field_release:zhu.table.RequestLandlordResp.next)
  clear_has_next();
  return next_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestLandlordResp::set_allocated_next(::std::string* next) {
  if (next != NULL) {
    set_has_next();
  } else {
    clear_has_next();
  }
  next_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:zhu.table.RequestLandlordResp.next)
}

// optional uint32 nextPosition = 9;
bool RequestLandlordResp::has_nextposition() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RequestLandlordResp::set_has_nextposition() {
  _has_bits_[0] |= 0x00000100u;
}
void RequestLandlordResp::clear_has_nextposition() {
  _has_bits_[0] &= ~0x00000100u;
}
void RequestLandlordResp::clear_nextposition() {
  nextposition_ = 0u;
  clear_has_nextposition();
}
::google::protobuf::uint32 RequestLandlordResp::nextposition() const {
  // @@protoc_insertion_point(field_get:zhu.table.RequestLandlordResp.nextPosition)
  return nextposition_;
}
void RequestLandlordResp::set_nextposition(::google::protobuf::uint32 value) {
  set_has_nextposition();
  nextposition_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.RequestLandlordResp.nextPosition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DispatchPoker::kPockersFieldNumber;
const int DispatchPoker::kTypeFieldNumber;
const int DispatchPoker::kLandlordAccountFieldNumber;
const int DispatchPoker::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DispatchPoker::DispatchPoker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_table_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhu.table.DispatchPoker)
}
DispatchPoker::DispatchPoker(const DispatchPoker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pockers_(from.pockers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  landlordaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_landlordaccount()) {
    landlordaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.landlordaccount_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&type_) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:zhu.table.DispatchPoker)
}

void DispatchPoker::SharedCtor() {
  _cached_size_ = 0;
  landlordaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&type_) + sizeof(position_));
}

DispatchPoker::~DispatchPoker() {
  // @@protoc_insertion_point(destructor:zhu.table.DispatchPoker)
  SharedDtor();
}

void DispatchPoker::SharedDtor() {
  landlordaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DispatchPoker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DispatchPoker::descriptor() {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DispatchPoker& DispatchPoker::default_instance() {
  protobuf_table_2eproto::InitDefaults();
  return *internal_default_instance();
}

DispatchPoker* DispatchPoker::New(::google::protobuf::Arena* arena) const {
  DispatchPoker* n = new DispatchPoker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DispatchPoker::Clear() {
// @@protoc_insertion_point(message_clear_start:zhu.table.DispatchPoker)
  pockers_.Clear();
  if (has_landlordaccount()) {
    GOOGLE_DCHECK(!landlordaccount_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*landlordaccount_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&type_) + sizeof(position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DispatchPoker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhu.table.DispatchPoker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zhu.table.Poker pockers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pockers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .zhu.table.DispatchPokerType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zhu::table::DispatchPokerType_IsValid(value)) {
            set_type(static_cast< ::zhu::table::DispatchPokerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes landlordAccount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_landlordaccount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhu.table.DispatchPoker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhu.table.DispatchPoker)
  return false;
#undef DO_
}

void DispatchPoker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhu.table.DispatchPoker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zhu.table.Poker pockers = 1;
  for (unsigned int i = 0, n = this->pockers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pockers(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required .zhu.table.DispatchPokerType type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bytes landlordAccount = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->landlordaccount(), output);
  }

  // optional uint32 position = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhu.table.DispatchPoker)
}

::google::protobuf::uint8* DispatchPoker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhu.table.DispatchPoker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zhu.table.Poker pockers = 1;
  for (unsigned int i = 0, n = this->pockers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pockers(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // required .zhu.table.DispatchPokerType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bytes landlordAccount = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->landlordaccount(), target);
  }

  // optional uint32 position = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhu.table.DispatchPoker)
  return target;
}

size_t DispatchPoker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zhu.table.DispatchPoker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .zhu.table.DispatchPokerType type = 2;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated .zhu.table.Poker pockers = 1;
  {
    unsigned int count = this->pockers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pockers(i));
    }
  }

  // optional bytes landlordAccount = 3;
  if (has_landlordaccount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->landlordaccount());
  }

  // optional uint32 position = 4;
  if (has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DispatchPoker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zhu.table.DispatchPoker)
  GOOGLE_DCHECK_NE(&from, this);
  const DispatchPoker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DispatchPoker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zhu.table.DispatchPoker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zhu.table.DispatchPoker)
    MergeFrom(*source);
  }
}

void DispatchPoker::MergeFrom(const DispatchPoker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zhu.table.DispatchPoker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pockers_.MergeFrom(from.pockers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_landlordaccount();
      landlordaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.landlordaccount_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DispatchPoker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zhu.table.DispatchPoker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DispatchPoker::CopyFrom(const DispatchPoker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zhu.table.DispatchPoker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispatchPoker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pockers())) return false;
  return true;
}

void DispatchPoker::Swap(DispatchPoker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DispatchPoker::InternalSwap(DispatchPoker* other) {
  pockers_.InternalSwap(&other->pockers_);
  landlordaccount_.Swap(&other->landlordaccount_);
  std::swap(type_, other->type_);
  std::swap(position_, other->position_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DispatchPoker::GetMetadata() const {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DispatchPoker

// repeated .zhu.table.Poker pockers = 1;
int DispatchPoker::pockers_size() const {
  return pockers_.size();
}
void DispatchPoker::clear_pockers() {
  pockers_.Clear();
}
const ::zhu::table::Poker& DispatchPoker::pockers(int index) const {
  // @@protoc_insertion_point(field_get:zhu.table.DispatchPoker.pockers)
  return pockers_.Get(index);
}
::zhu::table::Poker* DispatchPoker::mutable_pockers(int index) {
  // @@protoc_insertion_point(field_mutable:zhu.table.DispatchPoker.pockers)
  return pockers_.Mutable(index);
}
::zhu::table::Poker* DispatchPoker::add_pockers() {
  // @@protoc_insertion_point(field_add:zhu.table.DispatchPoker.pockers)
  return pockers_.Add();
}
::google::protobuf::RepeatedPtrField< ::zhu::table::Poker >*
DispatchPoker::mutable_pockers() {
  // @@protoc_insertion_point(field_mutable_list:zhu.table.DispatchPoker.pockers)
  return &pockers_;
}
const ::google::protobuf::RepeatedPtrField< ::zhu::table::Poker >&
DispatchPoker::pockers() const {
  // @@protoc_insertion_point(field_list:zhu.table.DispatchPoker.pockers)
  return pockers_;
}

// required .zhu.table.DispatchPokerType type = 2;
bool DispatchPoker::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DispatchPoker::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void DispatchPoker::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void DispatchPoker::clear_type() {
  type_ = 0;
  clear_has_type();
}
::zhu::table::DispatchPokerType DispatchPoker::type() const {
  // @@protoc_insertion_point(field_get:zhu.table.DispatchPoker.type)
  return static_cast< ::zhu::table::DispatchPokerType >(type_);
}
void DispatchPoker::set_type(::zhu::table::DispatchPokerType value) {
  assert(::zhu::table::DispatchPokerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.DispatchPoker.type)
}

// optional bytes landlordAccount = 3;
bool DispatchPoker::has_landlordaccount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DispatchPoker::set_has_landlordaccount() {
  _has_bits_[0] |= 0x00000001u;
}
void DispatchPoker::clear_has_landlordaccount() {
  _has_bits_[0] &= ~0x00000001u;
}
void DispatchPoker::clear_landlordaccount() {
  landlordaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_landlordaccount();
}
const ::std::string& DispatchPoker::landlordaccount() const {
  // @@protoc_insertion_point(field_get:zhu.table.DispatchPoker.landlordAccount)
  return landlordaccount_.GetNoArena();
}
void DispatchPoker::set_landlordaccount(const ::std::string& value) {
  set_has_landlordaccount();
  landlordaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.table.DispatchPoker.landlordAccount)
}
#if LANG_CXX11
void DispatchPoker::set_landlordaccount(::std::string&& value) {
  set_has_landlordaccount();
  landlordaccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.table.DispatchPoker.landlordAccount)
}
#endif
void DispatchPoker::set_landlordaccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_landlordaccount();
  landlordaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.table.DispatchPoker.landlordAccount)
}
void DispatchPoker::set_landlordaccount(const void* value, size_t size) {
  set_has_landlordaccount();
  landlordaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.table.DispatchPoker.landlordAccount)
}
::std::string* DispatchPoker::mutable_landlordaccount() {
  set_has_landlordaccount();
  // @@protoc_insertion_point(field_mutable:zhu.table.DispatchPoker.landlordAccount)
  return landlordaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DispatchPoker::release_landlordaccount() {
  // @@protoc_insertion_point(field_release:zhu.table.DispatchPoker.landlordAccount)
  clear_has_landlordaccount();
  return landlordaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DispatchPoker::set_allocated_landlordaccount(::std::string* landlordaccount) {
  if (landlordaccount != NULL) {
    set_has_landlordaccount();
  } else {
    clear_has_landlordaccount();
  }
  landlordaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), landlordaccount);
  // @@protoc_insertion_point(field_set_allocated:zhu.table.DispatchPoker.landlordAccount)
}

// optional uint32 position = 4;
bool DispatchPoker::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DispatchPoker::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void DispatchPoker::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void DispatchPoker::clear_position() {
  position_ = 0u;
  clear_has_position();
}
::google::protobuf::uint32 DispatchPoker::position() const {
  // @@protoc_insertion_point(field_get:zhu.table.DispatchPoker.position)
  return position_;
}
void DispatchPoker::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.DispatchPoker.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerOut::kErrorResultFieldNumber;
const int PlayerOut::kDescFieldNumber;
const int PlayerOut::kAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerOut::PlayerOut()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_table_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zhu.table.PlayerOut)
}
PlayerOut::PlayerOut(const PlayerOut& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  errorresult_ = from.errorresult_;
  // @@protoc_insertion_point(copy_constructor:zhu.table.PlayerOut)
}

void PlayerOut::SharedCtor() {
  _cached_size_ = 0;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorresult_ = 0;
}

PlayerOut::~PlayerOut() {
  // @@protoc_insertion_point(destructor:zhu.table.PlayerOut)
  SharedDtor();
}

void PlayerOut::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerOut::descriptor() {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerOut& PlayerOut::default_instance() {
  protobuf_table_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerOut* PlayerOut::New(::google::protobuf::Arena* arena) const {
  PlayerOut* n = new PlayerOut;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerOut::Clear() {
// @@protoc_insertion_point(message_clear_start:zhu.table.PlayerOut)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_desc()) {
      GOOGLE_DCHECK(!desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*desc_.UnsafeRawStringPointer())->clear();
    }
    if (has_account()) {
      GOOGLE_DCHECK(!account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_.UnsafeRawStringPointer())->clear();
    }
  }
  errorresult_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zhu.table.PlayerOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .zhu.table.ERROR_CODE errorResult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zhu::table::ERROR_CODE_IsValid(value)) {
            set_errorresult(static_cast< ::zhu::table::ERROR_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zhu.table.PlayerOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zhu.table.PlayerOut)
  return false;
#undef DO_
}

void PlayerOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zhu.table.PlayerOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .zhu.table.ERROR_CODE errorResult = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errorresult(), output);
  }

  // optional bytes desc = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->desc(), output);
  }

  // optional bytes account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zhu.table.PlayerOut)
}

::google::protobuf::uint8* PlayerOut::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zhu.table.PlayerOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .zhu.table.ERROR_CODE errorResult = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errorresult(), target);
  }

  // optional bytes desc = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->desc(), target);
  }

  // optional bytes account = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zhu.table.PlayerOut)
  return target;
}

size_t PlayerOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zhu.table.PlayerOut)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .zhu.table.ERROR_CODE errorResult = 1;
  if (has_errorresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorresult());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

    // optional bytes account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerOut::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zhu.table.PlayerOut)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerOut* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerOut>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zhu.table.PlayerOut)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zhu.table.PlayerOut)
    MergeFrom(*source);
  }
}

void PlayerOut::MergeFrom(const PlayerOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zhu.table.PlayerOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000004u) {
      errorresult_ = from.errorresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerOut::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zhu.table.PlayerOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerOut::CopyFrom(const PlayerOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zhu.table.PlayerOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void PlayerOut::Swap(PlayerOut* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerOut::InternalSwap(PlayerOut* other) {
  desc_.Swap(&other->desc_);
  account_.Swap(&other->account_);
  std::swap(errorresult_, other->errorresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerOut::GetMetadata() const {
  protobuf_table_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_table_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerOut

// required .zhu.table.ERROR_CODE errorResult = 1;
bool PlayerOut::has_errorresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerOut::set_has_errorresult() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerOut::clear_has_errorresult() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerOut::clear_errorresult() {
  errorresult_ = 0;
  clear_has_errorresult();
}
::zhu::table::ERROR_CODE PlayerOut::errorresult() const {
  // @@protoc_insertion_point(field_get:zhu.table.PlayerOut.errorResult)
  return static_cast< ::zhu::table::ERROR_CODE >(errorresult_);
}
void PlayerOut::set_errorresult(::zhu::table::ERROR_CODE value) {
  assert(::zhu::table::ERROR_CODE_IsValid(value));
  set_has_errorresult();
  errorresult_ = value;
  // @@protoc_insertion_point(field_set:zhu.table.PlayerOut.errorResult)
}

// optional bytes desc = 2;
bool PlayerOut::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerOut::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerOut::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerOut::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& PlayerOut::desc() const {
  // @@protoc_insertion_point(field_get:zhu.table.PlayerOut.desc)
  return desc_.GetNoArena();
}
void PlayerOut::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.table.PlayerOut.desc)
}
#if LANG_CXX11
void PlayerOut::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.table.PlayerOut.desc)
}
#endif
void PlayerOut::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.table.PlayerOut.desc)
}
void PlayerOut::set_desc(const void* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.table.PlayerOut.desc)
}
::std::string* PlayerOut::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:zhu.table.PlayerOut.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerOut::release_desc() {
  // @@protoc_insertion_point(field_release:zhu.table.PlayerOut.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerOut::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:zhu.table.PlayerOut.desc)
}

// optional bytes account = 3;
bool PlayerOut::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerOut::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerOut::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerOut::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
const ::std::string& PlayerOut::account() const {
  // @@protoc_insertion_point(field_get:zhu.table.PlayerOut.account)
  return account_.GetNoArena();
}
void PlayerOut::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zhu.table.PlayerOut.account)
}
#if LANG_CXX11
void PlayerOut::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zhu.table.PlayerOut.account)
}
#endif
void PlayerOut::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zhu.table.PlayerOut.account)
}
void PlayerOut::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zhu.table.PlayerOut.account)
}
::std::string* PlayerOut::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:zhu.table.PlayerOut.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerOut::release_account() {
  // @@protoc_insertion_point(field_release:zhu.table.PlayerOut.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerOut::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:zhu.table.PlayerOut.account)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace table
}  // namespace zhu

// @@protoc_insertion_point(global_scope)
