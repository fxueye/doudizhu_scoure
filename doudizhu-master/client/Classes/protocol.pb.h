// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_protocol_2eproto__INCLUDED
#define PROTOBUF_protocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2eproto();
void protobuf_AssignDesc_protocol_2eproto();
void protobuf_ShutdownFile_protocol_2eproto();

class S2SSystem;
class S2SSystem_GetType;
class S2SSystem_LoginInfo;
class S2SSystem_RegisterInfo;
class S2SSystem_Request;
class S2SSystem_ResultChatMsg;
class S2SSystem_ResultInfo;

// ===================================================================

class S2SSystem_GetType : public ::google::protobuf::Message {
 public:
  S2SSystem_GetType();
  virtual ~S2SSystem_GetType();

  S2SSystem_GetType(const S2SSystem_GetType& from);

  inline S2SSystem_GetType& operator=(const S2SSystem_GetType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SSystem_GetType& default_instance();

  void Swap(S2SSystem_GetType* other);

  // implements Message ----------------------------------------------

  S2SSystem_GetType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SSystem_GetType& from);
  void MergeFrom(const S2SSystem_GetType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.S2SSystem.GetType)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 pid_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static S2SSystem_GetType* default_instance_;
};
// -------------------------------------------------------------------

class S2SSystem_LoginInfo : public ::google::protobuf::Message {
 public:
  S2SSystem_LoginInfo();
  virtual ~S2SSystem_LoginInfo();

  S2SSystem_LoginInfo(const S2SSystem_LoginInfo& from);

  inline S2SSystem_LoginInfo& operator=(const S2SSystem_LoginInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SSystem_LoginInfo& default_instance();

  void Swap(S2SSystem_LoginInfo* other);

  // implements Message ----------------------------------------------

  S2SSystem_LoginInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SSystem_LoginInfo& from);
  void MergeFrom(const S2SSystem_LoginInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string passworld = 3;
  inline bool has_passworld() const;
  inline void clear_passworld();
  static const int kPassworldFieldNumber = 3;
  inline const ::std::string& passworld() const;
  inline void set_passworld(const ::std::string& value);
  inline void set_passworld(const char* value);
  inline void set_passworld(const char* value, size_t size);
  inline ::std::string* mutable_passworld();
  inline ::std::string* release_passworld();
  inline void set_allocated_passworld(::std::string* passworld);

  // @@protoc_insertion_point(class_scope:protocol.S2SSystem.LoginInfo)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_passworld();
  inline void clear_has_passworld();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* passworld_;
  ::google::protobuf::int32 pid_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static S2SSystem_LoginInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2SSystem_RegisterInfo : public ::google::protobuf::Message {
 public:
  S2SSystem_RegisterInfo();
  virtual ~S2SSystem_RegisterInfo();

  S2SSystem_RegisterInfo(const S2SSystem_RegisterInfo& from);

  inline S2SSystem_RegisterInfo& operator=(const S2SSystem_RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SSystem_RegisterInfo& default_instance();

  void Swap(S2SSystem_RegisterInfo* other);

  // implements Message ----------------------------------------------

  S2SSystem_RegisterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SSystem_RegisterInfo& from);
  void MergeFrom(const S2SSystem_RegisterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 age = 3;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 3;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // optional string passworld = 4;
  inline bool has_passworld() const;
  inline void clear_passworld();
  static const int kPassworldFieldNumber = 4;
  inline const ::std::string& passworld() const;
  inline void set_passworld(const ::std::string& value);
  inline void set_passworld(const char* value);
  inline void set_passworld(const char* value, size_t size);
  inline ::std::string* mutable_passworld();
  inline ::std::string* release_passworld();
  inline void set_allocated_passworld(::std::string* passworld);

  // optional int32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.S2SSystem.RegisterInfo)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_passworld();
  inline void clear_has_passworld();
  inline void set_has_sex();
  inline void clear_has_sex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 age_;
  ::std::string* passworld_;
  ::google::protobuf::int32 sex_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static S2SSystem_RegisterInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2SSystem_Request : public ::google::protobuf::Message {
 public:
  S2SSystem_Request();
  virtual ~S2SSystem_Request();

  S2SSystem_Request(const S2SSystem_Request& from);

  inline S2SSystem_Request& operator=(const S2SSystem_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SSystem_Request& default_instance();

  void Swap(S2SSystem_Request* other);

  // implements Message ----------------------------------------------

  S2SSystem_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SSystem_Request& from);
  void MergeFrom(const S2SSystem_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.S2SSystem.Request)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static S2SSystem_Request* default_instance_;
};
// -------------------------------------------------------------------

class S2SSystem_ResultChatMsg : public ::google::protobuf::Message {
 public:
  S2SSystem_ResultChatMsg();
  virtual ~S2SSystem_ResultChatMsg();

  S2SSystem_ResultChatMsg(const S2SSystem_ResultChatMsg& from);

  inline S2SSystem_ResultChatMsg& operator=(const S2SSystem_ResultChatMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SSystem_ResultChatMsg& default_instance();

  void Swap(S2SSystem_ResultChatMsg* other);

  // implements Message ----------------------------------------------

  S2SSystem_ResultChatMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SSystem_ResultChatMsg& from);
  void MergeFrom(const S2SSystem_ResultChatMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 pid = 1;
  inline int pid_size() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int32 pid(int index) const;
  inline void set_pid(int index, ::google::protobuf::int32 value);
  inline void add_pid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pid();

  // repeated string playername = 2;
  inline int playername_size() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 2;
  inline const ::std::string& playername(int index) const;
  inline ::std::string* mutable_playername(int index);
  inline void set_playername(int index, const ::std::string& value);
  inline void set_playername(int index, const char* value);
  inline void set_playername(int index, const char* value, size_t size);
  inline ::std::string* add_playername();
  inline void add_playername(const ::std::string& value);
  inline void add_playername(const char* value);
  inline void add_playername(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& playername() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_playername();

  // repeated string msg = 3;
  inline int msg_size() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg(int index) const;
  inline ::std::string* mutable_msg(int index);
  inline void set_msg(int index, const ::std::string& value);
  inline void set_msg(int index, const char* value);
  inline void set_msg(int index, const char* value, size_t size);
  inline ::std::string* add_msg();
  inline void add_msg(const ::std::string& value);
  inline void add_msg(const char* value);
  inline void add_msg(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& msg() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_msg();

  // @@protoc_insertion_point(class_scope:protocol.S2SSystem.ResultChatMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> playername_;
  ::google::protobuf::RepeatedPtrField< ::std::string> msg_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static S2SSystem_ResultChatMsg* default_instance_;
};
// -------------------------------------------------------------------

class S2SSystem_ResultInfo : public ::google::protobuf::Message {
 public:
  S2SSystem_ResultInfo();
  virtual ~S2SSystem_ResultInfo();

  S2SSystem_ResultInfo(const S2SSystem_ResultInfo& from);

  inline S2SSystem_ResultInfo& operator=(const S2SSystem_ResultInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SSystem_ResultInfo& default_instance();

  void Swap(S2SSystem_ResultInfo* other);

  // implements Message ----------------------------------------------

  S2SSystem_ResultInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SSystem_ResultInfo& from);
  void MergeFrom(const S2SSystem_ResultInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.S2SSystem.ResultInfo)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static S2SSystem_ResultInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2SSystem : public ::google::protobuf::Message {
 public:
  S2SSystem();
  virtual ~S2SSystem();

  S2SSystem(const S2SSystem& from);

  inline S2SSystem& operator=(const S2SSystem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SSystem& default_instance();

  void Swap(S2SSystem* other);

  // implements Message ----------------------------------------------

  S2SSystem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SSystem& from);
  void MergeFrom(const S2SSystem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef S2SSystem_GetType GetType;
  typedef S2SSystem_LoginInfo LoginInfo;
  typedef S2SSystem_RegisterInfo RegisterInfo;
  typedef S2SSystem_Request Request;
  typedef S2SSystem_ResultChatMsg ResultChatMsg;
  typedef S2SSystem_ResultInfo ResultInfo;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.S2SSystem)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static S2SSystem* default_instance_;
};
// ===================================================================


// ===================================================================

// S2SSystem_GetType

// optional int32 pid = 1;
inline bool S2SSystem_GetType::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SSystem_GetType::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SSystem_GetType::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SSystem_GetType::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 S2SSystem_GetType::pid() const {
  // @@protoc_insertion_point(field_get:protocol.S2SSystem.GetType.pid)
  return pid_;
}
inline void S2SSystem_GetType::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:protocol.S2SSystem.GetType.pid)
}

// -------------------------------------------------------------------

// S2SSystem_LoginInfo

// optional int32 pid = 1;
inline bool S2SSystem_LoginInfo::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SSystem_LoginInfo::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SSystem_LoginInfo::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SSystem_LoginInfo::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 S2SSystem_LoginInfo::pid() const {
  // @@protoc_insertion_point(field_get:protocol.S2SSystem.LoginInfo.pid)
  return pid_;
}
inline void S2SSystem_LoginInfo::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:protocol.S2SSystem.LoginInfo.pid)
}

// optional string name = 2;
inline bool S2SSystem_LoginInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SSystem_LoginInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SSystem_LoginInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SSystem_LoginInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& S2SSystem_LoginInfo::name() const {
  // @@protoc_insertion_point(field_get:protocol.S2SSystem.LoginInfo.name)
  return *name_;
}
inline void S2SSystem_LoginInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.S2SSystem.LoginInfo.name)
}
inline void S2SSystem_LoginInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.S2SSystem.LoginInfo.name)
}
inline void S2SSystem_LoginInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.S2SSystem.LoginInfo.name)
}
inline ::std::string* S2SSystem_LoginInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.S2SSystem.LoginInfo.name)
  return name_;
}
inline ::std::string* S2SSystem_LoginInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void S2SSystem_LoginInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.S2SSystem.LoginInfo.name)
}

// optional string passworld = 3;
inline bool S2SSystem_LoginInfo::has_passworld() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SSystem_LoginInfo::set_has_passworld() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SSystem_LoginInfo::clear_has_passworld() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SSystem_LoginInfo::clear_passworld() {
  if (passworld_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passworld_->clear();
  }
  clear_has_passworld();
}
inline const ::std::string& S2SSystem_LoginInfo::passworld() const {
  // @@protoc_insertion_point(field_get:protocol.S2SSystem.LoginInfo.passworld)
  return *passworld_;
}
inline void S2SSystem_LoginInfo::set_passworld(const ::std::string& value) {
  set_has_passworld();
  if (passworld_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passworld_ = new ::std::string;
  }
  passworld_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.S2SSystem.LoginInfo.passworld)
}
inline void S2SSystem_LoginInfo::set_passworld(const char* value) {
  set_has_passworld();
  if (passworld_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passworld_ = new ::std::string;
  }
  passworld_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.S2SSystem.LoginInfo.passworld)
}
inline void S2SSystem_LoginInfo::set_passworld(const char* value, size_t size) {
  set_has_passworld();
  if (passworld_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passworld_ = new ::std::string;
  }
  passworld_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.S2SSystem.LoginInfo.passworld)
}
inline ::std::string* S2SSystem_LoginInfo::mutable_passworld() {
  set_has_passworld();
  if (passworld_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passworld_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.S2SSystem.LoginInfo.passworld)
  return passworld_;
}
inline ::std::string* S2SSystem_LoginInfo::release_passworld() {
  clear_has_passworld();
  if (passworld_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passworld_;
    passworld_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void S2SSystem_LoginInfo::set_allocated_passworld(::std::string* passworld) {
  if (passworld_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passworld_;
  }
  if (passworld) {
    set_has_passworld();
    passworld_ = passworld;
  } else {
    clear_has_passworld();
    passworld_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.S2SSystem.LoginInfo.passworld)
}

// -------------------------------------------------------------------

// S2SSystem_RegisterInfo

// optional int32 pid = 1;
inline bool S2SSystem_RegisterInfo::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SSystem_RegisterInfo::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SSystem_RegisterInfo::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SSystem_RegisterInfo::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 S2SSystem_RegisterInfo::pid() const {
  // @@protoc_insertion_point(field_get:protocol.S2SSystem.RegisterInfo.pid)
  return pid_;
}
inline void S2SSystem_RegisterInfo::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:protocol.S2SSystem.RegisterInfo.pid)
}

// optional string name = 2;
inline bool S2SSystem_RegisterInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SSystem_RegisterInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SSystem_RegisterInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SSystem_RegisterInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& S2SSystem_RegisterInfo::name() const {
  // @@protoc_insertion_point(field_get:protocol.S2SSystem.RegisterInfo.name)
  return *name_;
}
inline void S2SSystem_RegisterInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.S2SSystem.RegisterInfo.name)
}
inline void S2SSystem_RegisterInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.S2SSystem.RegisterInfo.name)
}
inline void S2SSystem_RegisterInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.S2SSystem.RegisterInfo.name)
}
inline ::std::string* S2SSystem_RegisterInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.S2SSystem.RegisterInfo.name)
  return name_;
}
inline ::std::string* S2SSystem_RegisterInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void S2SSystem_RegisterInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.S2SSystem.RegisterInfo.name)
}

// optional int32 age = 3;
inline bool S2SSystem_RegisterInfo::has_age() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SSystem_RegisterInfo::set_has_age() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SSystem_RegisterInfo::clear_has_age() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SSystem_RegisterInfo::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 S2SSystem_RegisterInfo::age() const {
  // @@protoc_insertion_point(field_get:protocol.S2SSystem.RegisterInfo.age)
  return age_;
}
inline void S2SSystem_RegisterInfo::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:protocol.S2SSystem.RegisterInfo.age)
}

// optional string passworld = 4;
inline bool S2SSystem_RegisterInfo::has_passworld() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SSystem_RegisterInfo::set_has_passworld() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SSystem_RegisterInfo::clear_has_passworld() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SSystem_RegisterInfo::clear_passworld() {
  if (passworld_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passworld_->clear();
  }
  clear_has_passworld();
}
inline const ::std::string& S2SSystem_RegisterInfo::passworld() const {
  // @@protoc_insertion_point(field_get:protocol.S2SSystem.RegisterInfo.passworld)
  return *passworld_;
}
inline void S2SSystem_RegisterInfo::set_passworld(const ::std::string& value) {
  set_has_passworld();
  if (passworld_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passworld_ = new ::std::string;
  }
  passworld_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.S2SSystem.RegisterInfo.passworld)
}
inline void S2SSystem_RegisterInfo::set_passworld(const char* value) {
  set_has_passworld();
  if (passworld_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passworld_ = new ::std::string;
  }
  passworld_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.S2SSystem.RegisterInfo.passworld)
}
inline void S2SSystem_RegisterInfo::set_passworld(const char* value, size_t size) {
  set_has_passworld();
  if (passworld_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passworld_ = new ::std::string;
  }
  passworld_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.S2SSystem.RegisterInfo.passworld)
}
inline ::std::string* S2SSystem_RegisterInfo::mutable_passworld() {
  set_has_passworld();
  if (passworld_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passworld_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.S2SSystem.RegisterInfo.passworld)
  return passworld_;
}
inline ::std::string* S2SSystem_RegisterInfo::release_passworld() {
  clear_has_passworld();
  if (passworld_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passworld_;
    passworld_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void S2SSystem_RegisterInfo::set_allocated_passworld(::std::string* passworld) {
  if (passworld_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passworld_;
  }
  if (passworld) {
    set_has_passworld();
    passworld_ = passworld;
  } else {
    clear_has_passworld();
    passworld_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.S2SSystem.RegisterInfo.passworld)
}

// optional int32 sex = 5;
inline bool S2SSystem_RegisterInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SSystem_RegisterInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SSystem_RegisterInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SSystem_RegisterInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 S2SSystem_RegisterInfo::sex() const {
  // @@protoc_insertion_point(field_get:protocol.S2SSystem.RegisterInfo.sex)
  return sex_;
}
inline void S2SSystem_RegisterInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:protocol.S2SSystem.RegisterInfo.sex)
}

// -------------------------------------------------------------------

// S2SSystem_Request

// optional int32 pid = 1;
inline bool S2SSystem_Request::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SSystem_Request::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SSystem_Request::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SSystem_Request::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 S2SSystem_Request::pid() const {
  // @@protoc_insertion_point(field_get:protocol.S2SSystem.Request.pid)
  return pid_;
}
inline void S2SSystem_Request::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:protocol.S2SSystem.Request.pid)
}

// optional int32 result = 2;
inline bool S2SSystem_Request::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SSystem_Request::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SSystem_Request::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SSystem_Request::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 S2SSystem_Request::result() const {
  // @@protoc_insertion_point(field_get:protocol.S2SSystem.Request.result)
  return result_;
}
inline void S2SSystem_Request::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:protocol.S2SSystem.Request.result)
}

// -------------------------------------------------------------------

// S2SSystem_ResultChatMsg

// repeated int32 pid = 1;
inline int S2SSystem_ResultChatMsg::pid_size() const {
  return pid_.size();
}
inline void S2SSystem_ResultChatMsg::clear_pid() {
  pid_.Clear();
}
inline ::google::protobuf::int32 S2SSystem_ResultChatMsg::pid(int index) const {
  // @@protoc_insertion_point(field_get:protocol.S2SSystem.ResultChatMsg.pid)
  return pid_.Get(index);
}
inline void S2SSystem_ResultChatMsg::set_pid(int index, ::google::protobuf::int32 value) {
  pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.S2SSystem.ResultChatMsg.pid)
}
inline void S2SSystem_ResultChatMsg::add_pid(::google::protobuf::int32 value) {
  pid_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.S2SSystem.ResultChatMsg.pid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
S2SSystem_ResultChatMsg::pid() const {
  // @@protoc_insertion_point(field_list:protocol.S2SSystem.ResultChatMsg.pid)
  return pid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
S2SSystem_ResultChatMsg::mutable_pid() {
  // @@protoc_insertion_point(field_mutable_list:protocol.S2SSystem.ResultChatMsg.pid)
  return &pid_;
}

// repeated string playername = 2;
inline int S2SSystem_ResultChatMsg::playername_size() const {
  return playername_.size();
}
inline void S2SSystem_ResultChatMsg::clear_playername() {
  playername_.Clear();
}
inline const ::std::string& S2SSystem_ResultChatMsg::playername(int index) const {
  // @@protoc_insertion_point(field_get:protocol.S2SSystem.ResultChatMsg.playername)
  return playername_.Get(index);
}
inline ::std::string* S2SSystem_ResultChatMsg::mutable_playername(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.S2SSystem.ResultChatMsg.playername)
  return playername_.Mutable(index);
}
inline void S2SSystem_ResultChatMsg::set_playername(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.S2SSystem.ResultChatMsg.playername)
  playername_.Mutable(index)->assign(value);
}
inline void S2SSystem_ResultChatMsg::set_playername(int index, const char* value) {
  playername_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.S2SSystem.ResultChatMsg.playername)
}
inline void S2SSystem_ResultChatMsg::set_playername(int index, const char* value, size_t size) {
  playername_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.S2SSystem.ResultChatMsg.playername)
}
inline ::std::string* S2SSystem_ResultChatMsg::add_playername() {
  return playername_.Add();
}
inline void S2SSystem_ResultChatMsg::add_playername(const ::std::string& value) {
  playername_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.S2SSystem.ResultChatMsg.playername)
}
inline void S2SSystem_ResultChatMsg::add_playername(const char* value) {
  playername_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.S2SSystem.ResultChatMsg.playername)
}
inline void S2SSystem_ResultChatMsg::add_playername(const char* value, size_t size) {
  playername_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.S2SSystem.ResultChatMsg.playername)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
S2SSystem_ResultChatMsg::playername() const {
  // @@protoc_insertion_point(field_list:protocol.S2SSystem.ResultChatMsg.playername)
  return playername_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
S2SSystem_ResultChatMsg::mutable_playername() {
  // @@protoc_insertion_point(field_mutable_list:protocol.S2SSystem.ResultChatMsg.playername)
  return &playername_;
}

// repeated string msg = 3;
inline int S2SSystem_ResultChatMsg::msg_size() const {
  return msg_.size();
}
inline void S2SSystem_ResultChatMsg::clear_msg() {
  msg_.Clear();
}
inline const ::std::string& S2SSystem_ResultChatMsg::msg(int index) const {
  // @@protoc_insertion_point(field_get:protocol.S2SSystem.ResultChatMsg.msg)
  return msg_.Get(index);
}
inline ::std::string* S2SSystem_ResultChatMsg::mutable_msg(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.S2SSystem.ResultChatMsg.msg)
  return msg_.Mutable(index);
}
inline void S2SSystem_ResultChatMsg::set_msg(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.S2SSystem.ResultChatMsg.msg)
  msg_.Mutable(index)->assign(value);
}
inline void S2SSystem_ResultChatMsg::set_msg(int index, const char* value) {
  msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.S2SSystem.ResultChatMsg.msg)
}
inline void S2SSystem_ResultChatMsg::set_msg(int index, const char* value, size_t size) {
  msg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.S2SSystem.ResultChatMsg.msg)
}
inline ::std::string* S2SSystem_ResultChatMsg::add_msg() {
  return msg_.Add();
}
inline void S2SSystem_ResultChatMsg::add_msg(const ::std::string& value) {
  msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.S2SSystem.ResultChatMsg.msg)
}
inline void S2SSystem_ResultChatMsg::add_msg(const char* value) {
  msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.S2SSystem.ResultChatMsg.msg)
}
inline void S2SSystem_ResultChatMsg::add_msg(const char* value, size_t size) {
  msg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.S2SSystem.ResultChatMsg.msg)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
S2SSystem_ResultChatMsg::msg() const {
  // @@protoc_insertion_point(field_list:protocol.S2SSystem.ResultChatMsg.msg)
  return msg_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
S2SSystem_ResultChatMsg::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_list:protocol.S2SSystem.ResultChatMsg.msg)
  return &msg_;
}

// -------------------------------------------------------------------

// S2SSystem_ResultInfo

// optional int32 pid = 1;
inline bool S2SSystem_ResultInfo::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SSystem_ResultInfo::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SSystem_ResultInfo::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SSystem_ResultInfo::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 S2SSystem_ResultInfo::pid() const {
  // @@protoc_insertion_point(field_get:protocol.S2SSystem.ResultInfo.pid)
  return pid_;
}
inline void S2SSystem_ResultInfo::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:protocol.S2SSystem.ResultInfo.pid)
}

// optional int32 result = 2;
inline bool S2SSystem_ResultInfo::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SSystem_ResultInfo::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SSystem_ResultInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SSystem_ResultInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 S2SSystem_ResultInfo::result() const {
  // @@protoc_insertion_point(field_get:protocol.S2SSystem.ResultInfo.result)
  return result_;
}
inline void S2SSystem_ResultInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:protocol.S2SSystem.ResultInfo.result)
}

// -------------------------------------------------------------------

// S2SSystem


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2eproto__INCLUDED
